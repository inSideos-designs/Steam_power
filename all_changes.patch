diff --git a/.env.example b/.env.example
index d77d66d..a6d8980 100644
--- a/.env.example
+++ b/.env.example
@@ -3,3 +3,8 @@ VITE_SQUARE_LOCATION_ID=REPLACE_WITH_YOUR_SANDBOX_LOCATION_ID
 SQUARE_ACCESS_TOKEN=EAAAl4W0iUJ5lY4TMFnP2bauuMy2K9e81HFA6O7JQCkk-7o56aRnB9qXP4pGWCpo
 SQUARE_LOCATION_ID=REPLACE_WITH_YOUR_SANDBOX_LOCATION_ID
 API_PORT=4000
+SMTP_HOST=
+SMTP_PORT=587
+SMTP_USER=
+SMTP_PASS=
+EMAIL_FROM="Steam Powered Cleaning <no-reply@example.com>"
diff --git a/App.tsx b/App.tsx
index 22175c8..9705026 100644
--- a/App.tsx
+++ b/App.tsx
@@ -5,7 +5,6 @@ import Hero from './components/Hero';
 import Services from './components/Services';
 import WhyChooseUs from './components/WhyChooseUs';
 import Testimonials from './components/Testimonials';
-import SquareBooking from './components/SquareBooking';
 import About from './components/About';
 import Footer from './components/Footer';
 
@@ -18,7 +17,6 @@ const App: React.FC = () => {
         <Services />
         <WhyChooseUs />
         <About />
-        <SquareBooking />
         <Testimonials />
       </main>
       <Footer />
diff --git a/README.md b/README.md
index a7a4ffa..c81dcb7 100644
--- a/README.md
+++ b/README.md
@@ -1,3 +1,39 @@
 # Steam Powered Cleaning
 
-A modern React + Vite marketing site for Steam Powered Cleaning. The project uses Tailwind via CDN for styling and now bundles a Square Web Payments sandbox checkout demo.
+A modern React + Vite experience for Steam Powered Cleaning. The refreshed site now features a cart-based booking flow so visitors can bundle services, reserve time, and receive automated confirmations after checkout.
+
+## Booking Flow Highlights
+
+- Organize services by **Indoor**, **Outdoor**, **Automotive**, and **Add-On** categories covering carpets, tile, upholstery, windows, power washing, detailing, and take-home products.
+- Build a personalized cart with quantity controls, realtime pricing, and estimated on-site duration before submitting.
+- Collect contact details plus a preferred visit date, time, and time zone.
+- Server-side booking endpoint validates availability through Google Calendar, creates the calendar event, and emails the customer a summary (charges still occur after service completion).
+
+## Getting Started
+
+```bash
+npm install        # install client and server dependencies (run once)
+npm run dev        # start the Vite dev server (frontend)
+npm run server     # start the Express API with booking + email logic
+```
+
+Visit `http://localhost:5173` for the frontend and `http://localhost:4000/api/health` to verify the API is alive.
+
+## Environment Configuration
+
+Copy `.env.example` to `.env` (or inject these variables another way) and provide values for:
+
+- `VITE_SQUARE_APP_ID`, `VITE_SQUARE_LOCATION_ID`, `SQUARE_ACCESS_TOKEN`, `SQUARE_LOCATION_ID` – existing Square sandbox values if you still need them.
+- `API_PORT` – defaults to `4000`.
+- `SMTP_HOST`, `SMTP_PORT`, `SMTP_USER`, `SMTP_PASS`, `EMAIL_FROM` – SMTP credentials for the automated booking email. Omit `SMTP_USER`/`SMTP_PASS` if your relay allows anonymous auth.
+
+> **Tip:** If SMTP variables are not set, bookings still succeed but the API logs a warning and skips the confirmation email.
+
+Google Calendar credentials remain required so that bookings can check for conflicts and create events.
+
+## Development Notes
+
+- The new booking UI lives in `components/Services.tsx` and relies on the structured service catalogue in `data/services.ts`.
+- API changes are in `server/index.ts`, with email handling encapsulated in `server/email.ts`.
+- Install the `nodemailer` dependency locally (`npm install`) to update `node_modules` and the lock file.
+- For production, run `npm run build` to generate the static assets that the Express server serves from `dist/`.
diff --git a/components/Services.tsx b/components/Services.tsx
index 26dd8a7..6f7fc71 100644
--- a/components/Services.tsx
+++ b/components/Services.tsx
@@ -1,236 +1,755 @@
 
 import React from 'react';
-import type { Service } from '../types';
+import type { Service, ServiceCategory, ServiceFocus } from '../types';
 import { SERVICES } from '../constants';
 
-interface ServiceGroupConfig {
-  id: 'indoor' | 'outdoor' | 'estimate' | 'automotive';
-  title: string;
-  description: string;
-  filter: (service: Service) => boolean;
+type CartLineItem = {
+  service: Service;
+  quantity: number;
+};
+
+interface BookingConfirmation {
+  eventId?: string;
+  calendarUrl?: string;
+  durationMinutes: number;
+  totalPriceCents: number;
+  emailSent: boolean;
+  startTime: string;
+  timeZone: string;
+  items: Array<{
+    serviceId: string;
+    title: string;
+    quantity: number;
+    price: string;
+    priceCents: number;
+    serviceType: ServiceFocus;
+  }>;
 }
 
-const SERVICE_GROUPS: ServiceGroupConfig[] = [
-  {
-    id: 'indoor',
-    title: 'Indoor Services',
-    description: 'Carpets, upholstery, hallways, and interiors where families spend the most time.',
-    filter: (service) => service.category === 'indoor' && !!service.priceCents,
+const toIsoWithTimeZone = (dateString: string, timeString: string, timeZone: string) => {
+  if (!dateString || !timeString) {
+    return null;
+  }
+
+  try {
+    const normalizedTime = timeString.length <= 5 ? `${timeString}:00` : timeString;
+    const base = new Date(`${dateString}T${normalizedTime}`);
+    if (Number.isNaN(base.getTime())) {
+      return null;
+    }
+
+    const localized = new Date(base.toLocaleString('en-US', { timeZone }));
+    const diff = base.getTime() - localized.getTime();
+    return new Date(base.getTime() + diff).toISOString();
+  } catch (error) {
+    console.error('[booking] Failed to build ISO start time', error);
+    return null;
+  }
+};
+
+const formatAppointmentWindow = (isoString: string, timeZone: string) => {
+  try {
+    return new Intl.DateTimeFormat('en-US', {
+      dateStyle: 'full',
+      timeStyle: 'short',
+      timeZone,
+    }).format(new Date(isoString));
+  } catch {
+    return new Date(isoString).toLocaleString();
+  }
+};
+
+const CATEGORY_ORDER: ServiceCategory[] = ['indoor', 'outdoor', 'automotive', 'addons'];
+const SERVICE_TYPE_ORDER: ServiceFocus[] = [
+  'carpet',
+  'area_rug',
+  'tile',
+  'upholstery',
+  'windows',
+  'powerwash',
+  'detailing',
+  'products',
+];
+
+const CATEGORY_DETAILS: Record<ServiceCategory, { label: string; description: string; lead: string }>= {
+  indoor: {
+    label: 'Indoor',
+    description: 'Room-by-room carpet care, tiled surfaces, upholstery, mattresses, and interior windows.',
+    lead: 'Comfort-driven clean for every room',
+  },
+  outdoor: {
+    label: 'Outdoor',
+    description: 'Power washing, decks, fences, patios, garage floors, and outdoor accents.',
+    lead: 'Refresh every exterior surface',
+  },
+  automotive: {
+    label: 'Automotive',
+    description: 'Interior, exterior, and full detailing for cars, boats, and RVs of every size.',
+    lead: 'Rolling, floating, and road-trip ready',
+  },
+  addons: {
+    label: 'Add-Ons',
+    description: 'Helpful products and extras to maintain freshness between professional visits.',
+    lead: 'Extend the clean between appointments',
+  },
+};
+
+const SERVICE_TYPE_DETAILS: Record<ServiceFocus, { label: string; description: string }>= {
+  carpet: {
+    label: 'Carpet',
+    description: 'Steam extraction that removes embedded soil, allergens, and lingering odors.',
+  },
+  tile: {
+    label: 'Tile',
+    description: 'Grout-safe agitation and rinse systems that bring back the original shine.',
+  },
+  upholstery: {
+    label: 'Upholstery',
+    description: 'Fabric-safe cleaning that revives seating with deodorizing and fabric protection.',
   },
-  {
-    id: 'outdoor',
-    title: 'Outdoor Services',
-    description: 'Exterior surfaces, patios, and driveways that need a deep refresh.',
-    filter: (service) => service.category === 'outdoor' && !!service.priceCents,
+  windows: {
+    label: 'Windows',
+    description: 'Crystal-clear glass cleaning with detail work on frames, tracks, and seals.',
   },
-  {
-    id: 'automotive',
-    title: 'Automotive Services',
-    description: 'Interior and exterior detailing packages for vehicles that deserve a showroom-ready finish.',
-    filter: (service) => service.category === 'automotive' && !!service.priceCents,
+  area_rug: {
+    label: 'Area Rugs',
+    description: 'On-site and off-site options to revive woven textiles and specialty rugs.',
   },
-  {
-    id: 'estimate',
-    title: 'Estimate Services',
-    description: 'Projects that require an on-site evaluation before we finalize pricing.',
-    filter: (service) => !service.priceCents,
+  powerwash: {
+    label: 'Power Washing',
+    description: 'Exterior rinses, degreasing, and soft-washing tailored to the surface and soil level.',
   },
+  detailing: {
+    label: 'Detailing',
+    description: 'Interior, exterior, and full detailing packages for vehicles, boats, and RVs.',
+  },
+  products: {
+    label: 'Products',
+    description: 'Retail add-ons and supplies to maintain a just-cleaned scent and feel.',
+  },
+};
+
+const TIME_ZONE_OPTIONS = [
+  'America/New_York',
+  'America/Chicago',
+  'America/Denver',
+  'America/Los_Angeles',
+  'America/Phoenix',
+  'America/Anchorage',
 ];
 
-const formatPrice = (service: Service) => (service.priceCents ? service.price : 'Custom Estimate');
-
-const buildServiceList = (ids: readonly string[]) =>
-  ids
-    .map((id) => SERVICES.find((service) => service.id === id))
-    .filter((service): service is Service => Boolean(service));
-
-const CARPET_SERVICE_IDS = ['large-room-carpet', 'medium-room-carpet', 'small-room-carpet'] as const;
-const TILE_SERVICE_IDS = ['large-room-tile', 'medium-room-tile'] as const;
-const CARPET_SERVICES = buildServiceList(CARPET_SERVICE_IDS);
-const TILE_SERVICES = buildServiceList(TILE_SERVICE_IDS);
-const SELECTOR_SERVICE_IDS = new Set<string>([...CARPET_SERVICE_IDS, ...TILE_SERVICE_IDS]);
-
-interface RoomSizeSelectorProps {
-  eyebrow: string;
-  heading: string;
-  body: string;
-  services: Service[];
-  backgroundClass?: string;
-}
+const DEFAULT_TIME_ZONE = (() => {
+  try {
+    const tz = Intl.DateTimeFormat().resolvedOptions().timeZone;
+    return TIME_ZONE_OPTIONS.includes(tz) ? tz : 'America/New_York';
+  } catch {
+    return 'America/New_York';
+  }
+})();
 
-const RoomSizeSelector: React.FC<RoomSizeSelectorProps> = ({
-  eyebrow,
-  heading,
-  body,
-  services,
-  backgroundClass = 'bg-gradient-to-br from-white via-brand-light-blue/10 to-white',
-}) => {
-  if (!services.length) {
-    return null;
+const clampQuantity = (next: number) => Math.min(10, Math.max(0, Number.isFinite(next) ? next : 0));
+
+const formatCurrency = (cents: number) =>
+  new Intl.NumberFormat('en-US', {
+    style: 'currency',
+    currency: 'USD',
+    minimumFractionDigits: 2,
+  }).format(cents / 100);
+
+const formatDuration = (totalMinutes: number) => {
+  const hours = Math.floor(totalMinutes / 60);
+  const minutes = totalMinutes % 60;
+
+  if (hours <= 0) {
+    return `${minutes} min`;
   }
 
-  const [selectedId, setSelectedId] = React.useState<string>(services[0].id);
-  const selectedService = services.find((service) => service.id === selectedId) ?? services[0];
-  const bookingHref = selectedService.squareLink ?? '#booking';
+  if (minutes === 0) {
+    return `${hours} hr${hours > 1 ? 's' : ''}`;
+  }
 
-  return (
-    <section className={`${backgroundClass} rounded-3xl shadow-xl p-8 md:p-10`} aria-label={heading}>
-      <div className="grid gap-8 md:grid-cols-2 md:items-center">
-        <div>
-          <p className="text-xs font-semibold uppercase tracking-widest text-brand-cyan mb-3">{eyebrow}</p>
-          <h3 className="text-2xl font-bold text-brand-dark mb-3">{heading}</h3>
-          <p className="text-gray-600 mb-6">{body}</p>
-          <label htmlFor={`${eyebrow.toLowerCase().replace(/\s+/g, '-')}-select`} className="block text-sm font-semibold text-brand-dark mb-2">
-            Room size
-          </label>
-          <select
-            id={`${eyebrow.toLowerCase().replace(/\s+/g, '-')}-select`}
-            value={selectedId}
-            onChange={(event) => setSelectedId(event.target.value)}
-            className="w-full border border-gray-200 rounded-xl px-4 py-3 focus:outline-none focus:ring-2 focus:ring-brand-cyan bg-white"
-          >
-            {services.map((service) => (
-              <option key={service.id} value={service.id}>
-                {service.title}
-              </option>
-            ))}
-          </select>
-          <p className="mt-4 text-2xl font-bold text-brand-blue">{selectedService.price}</p>
-        </div>
-        <div className="bg-white border border-gray-100 rounded-2xl p-6 flex flex-col gap-4">
-          <img src={selectedService.imageUrl} alt={selectedService.title} className="w-full h-48 object-cover rounded-xl" />
-          <div>
-            <p className="text-sm font-semibold text-brand-cyan">{selectedService.title}</p>
-            <p className="text-gray-600 mt-2">{selectedService.description}</p>
-          </div>
-          <a
-            href={bookingHref}
-            target={selectedService.squareLink ? '_blank' : undefined}
-            rel={selectedService.squareLink ? 'noopener noreferrer' : undefined}
-            className="inline-flex items-center justify-center rounded-full bg-brand-cyan text-white font-semibold py-3 px-6 hover:bg-brand-blue transition-colors"
-          >
-            Book {selectedService.title}
-          </a>
-          <p className="text-sm text-gray-500">
-            Prefer to talk it through? <a href="#booking" className="text-brand-cyan font-semibold">Request a custom quote</a>.
-          </p>
-        </div>
-      </div>
-    </section>
-  );
+  return `${hours} hr${hours > 1 ? 's' : ''} ${minutes} min`;
 };
 
-const CarpetSizeSelector: React.FC = () => (
-  <RoomSizeSelector
-    eyebrow="Carpet Room Selector"
-    heading="Choose your carpet room size"
-    body="Pick the carpet size that matches your space. Pricing updates automatically and you can jump straight to booking."
-    services={CARPET_SERVICES}
-  />
-);
-
-const TileSizeSelector: React.FC = () => (
-  <RoomSizeSelector
-    eyebrow="Tile Room Selector"
-    heading="Select the tile room that fits"
-    body="Match the tile area that needs cleaning and see the tuned description, price, and checkout link instantly."
-    services={TILE_SERVICES}
-    backgroundClass="bg-gradient-to-br from-white via-brand-cyan/10 to-white"
-  />
-);
-
-const CATEGORY_LABELS: Record<Service['category'], string> = {
-  indoor: 'Indoor',
-  outdoor: 'Outdoor',
-  automotive: 'Automotive',
-  estimate: 'Estimate',
-};
+const Services: React.FC = () => {
+  const [selectedCategory, setSelectedCategory] = React.useState<ServiceCategory>('indoor');
+  const [selectedFocus, setSelectedFocus] = React.useState<ServiceFocus>('carpet');
+  const [cartItems, setCartItems] = React.useState<CartLineItem[]>([]);
+  const [quantities, setQuantities] = React.useState<Record<string, number>>({});
 
-const ServiceCard: React.FC<{ service: Service; allowBooking: boolean; ctaMode: 'book' | 'estimate' }>
-  = ({ service, allowBooking, ctaMode }) => {
-    return (
-      <div className="bg-white rounded-xl shadow-lg overflow-hidden flex flex-col border border-gray-100">
-        <img src={service.imageUrl} alt={service.title} className="w-full h-48 object-cover"/>
-        <div className="p-6 flex flex-col flex-grow">
-          <p className="text-xs font-semibold uppercase tracking-widest text-brand-cyan mb-2">{CATEGORY_LABELS[service.category]}</p>
-          <h3 className="text-xl font-bold text-brand-dark mb-2">{service.title}</h3>
-          <p className="text-gray-600 mb-4 flex-grow">{service.description}</p>
-          <div className="mt-auto space-y-4">
-            <p className="text-lg font-semibold text-brand-blue">{formatPrice(service)}</p>
-            {ctaMode === 'estimate' ? (
-              <a
-                href="#booking"
-                className="block w-full text-center border border-brand-cyan text-brand-cyan font-semibold py-3 rounded-lg hover:bg-brand-cyan hover:text-white transition-colors duration-300"
-              >
-                Request An Estimate
-              </a>
-            ) : allowBooking && service.squareLink ? (
-              <a
-                href={service.squareLink}
-                target="_blank"
-                rel="noopener noreferrer"
-                className="block w-full text-center bg-brand-cyan text-white font-semibold py-3 rounded-lg hover:bg-brand-blue transition-colors duration-300"
-              >
-                Book This Service
-              </a>
-            ) : (
-              <p className="text-sm text-gray-500">
-                Drop in your Square checkout link to enable instant booking.
-              </p>
-            )}
-          </div>
-        </div>
-      </div>
-    );
+  const [customerName, setCustomerName] = React.useState('');
+  const [customerEmail, setCustomerEmail] = React.useState('');
+  const [customerPhone, setCustomerPhone] = React.useState('');
+  const [customerNotes, setCustomerNotes] = React.useState('');
+  const [serviceDate, setServiceDate] = React.useState('');
+  const [serviceTime, setServiceTime] = React.useState('');
+  const [timeZone, setTimeZone] = React.useState<string>(DEFAULT_TIME_ZONE);
+  const [isSubmitting, setIsSubmitting] = React.useState(false);
+  const [submissionError, setSubmissionError] = React.useState<string | null>(null);
+  const [confirmation, setConfirmation] = React.useState<BookingConfirmation | null>(null);
+
+  const availableServiceTypes = React.useMemo(() => {
+    const categories = SERVICES.filter((service) => service.category === selectedCategory);
+    const set = new Set<ServiceFocus>();
+    categories.forEach((service) => set.add(service.serviceType));
+    return SERVICE_TYPE_ORDER.filter((type) => set.has(type));
+  }, [selectedCategory]);
+
+  React.useEffect(() => {
+    if (!availableServiceTypes.includes(selectedFocus)) {
+      setSelectedFocus(availableServiceTypes[0] ?? 'carpet');
+    }
+  }, [availableServiceTypes, selectedFocus]);
+
+  const servicesForSelection = React.useMemo(
+    () =>
+      SERVICES.filter(
+        (service) => service.category === selectedCategory && service.serviceType === selectedFocus,
+      ),
+    [selectedCategory, selectedFocus],
+  );
+
+  const updateCartWithQuantity = React.useCallback((service: Service, quantity: number) => {
+    const nextQuantity = clampQuantity(quantity);
+
+    setSubmissionError(null);
+    setConfirmation(null);
+
+    setCartItems((prev) => {
+      const existingIndex = prev.findIndex((item) => item.service.id === service.id);
+
+      if (existingIndex === -1) {
+        if (nextQuantity <= 0) {
+          return prev;
+        }
+        return [...prev, { service, quantity: nextQuantity }];
+      }
+
+      if (nextQuantity <= 0) {
+        return prev.filter((item) => item.service.id !== service.id);
+      }
+
+      const next = [...prev];
+      next[existingIndex] = { service, quantity: nextQuantity };
+      return next;
+    });
+  }, []);
+
+  const incrementCartItem = (service: Service, delta: number) => {
+    setSubmissionError(null);
+    setConfirmation(null);
+
+    setCartItems((prev) => {
+      const existing = prev.find((item) => item.service.id === service.id);
+      const currentQuantity = existing?.quantity ?? 0;
+      const nextQuantity = clampQuantity(currentQuantity + delta);
+      const filtered = prev.filter((item) => item.service.id !== service.id);
+      if (nextQuantity <= 0) {
+        return filtered;
+      }
+      return [...filtered, { service, quantity: nextQuantity }];
+    });
+    setQuantities((prev) => {
+      const current = prev[service.id] ?? 0;
+      const nextQuantity = clampQuantity(current + delta);
+      return { ...prev, [service.id]: nextQuantity > 0 ? nextQuantity : 1 };
+    });
   };
 
-const Services: React.FC = () => {
-  const grouped = SERVICE_GROUPS
-    .map((group) => ({
-      ...group,
-      services: SERVICES.filter((service) => group.filter(service) && !SELECTOR_SERVICE_IDS.has(service.id)),
-    }))
-    .filter((group) => group.services.length > 0);
+  const handleQuantityChange = (serviceId: string, value: string) => {
+    const parsed = Number.parseInt(value, 10);
+    const nextQuantity = clampQuantity(Number.isNaN(parsed) ? 0 : parsed);
+    setSubmissionError(null);
+    setQuantities((prev) => ({ ...prev, [serviceId]: nextQuantity || 1 }));
+  };
+
+  const handleAddToCart = (service: Service) => {
+    const quantity = quantities[service.id] ?? 1;
+    updateCartWithQuantity(service, quantity);
+  };
+
+  const removeFromCart = (serviceId: string) => {
+    setSubmissionError(null);
+    setConfirmation(null);
+    setCartItems((prev) => prev.filter((item) => item.service.id !== serviceId));
+  };
+
+  const totalPriceCents = cartItems.reduce((sum, line) => {
+    const price = line.service.priceCents ?? 0;
+    return sum + price * line.quantity;
+  }, 0);
+
+  const totalDurationMinutes = cartItems.reduce(
+    (sum, line) => sum + (line.service.durationMinutes ?? 0) * line.quantity,
+    0,
+  );
+
+  const isReadyToReserve =
+    cartItems.length > 0 &&
+    Boolean(customerName.trim()) &&
+    Boolean(customerEmail.trim()) &&
+    Boolean(serviceDate) &&
+    Boolean(serviceTime);
+
+  const handleReservation = async () => {
+    if (!cartItems.length) {
+      setSubmissionError('Add at least one service to your cart.');
+      return;
+    }
+
+    if (!isReadyToReserve || isSubmitting) {
+      setSubmissionError('Please complete the required contact and scheduling details.');
+      return;
+    }
+
+    const requestedStartIso = toIsoWithTimeZone(serviceDate, serviceTime, timeZone);
+    if (!requestedStartIso) {
+      setSubmissionError('Please select a valid appointment date and time.');
+      return;
+    }
+
+    setIsSubmitting(true);
+    setSubmissionError(null);
+
+    const payload = {
+      items: cartItems.map((item) => ({
+        serviceId: item.service.id,
+        quantity: item.quantity,
+      })),
+      customer: {
+        name: customerName.trim(),
+        email: customerEmail.trim(),
+        phone: customerPhone.trim() || undefined,
+      },
+      notes: customerNotes.trim() ? customerNotes.trim() : undefined,
+      requestedStart: requestedStartIso,
+      timeZone,
+    };
+
+    try {
+      const response = await fetch('/api/bookings', {
+        method: 'POST',
+        headers: {
+          'Content-Type': 'application/json',
+        },
+        body: JSON.stringify(payload),
+      });
+
+      const json = await response.json().catch(() => null);
+      if (!response.ok || !json) {
+        throw new Error(json?.error ?? 'Unable to complete your reservation right now.');
+      }
+
+      const booking = json as BookingConfirmation;
+      setConfirmation(booking);
+      setCartItems([]);
+      setQuantities({});
+      setCustomerNotes('');
+    } catch (error) {
+      setSubmissionError(
+        error instanceof Error ? error.message : 'Unable to complete your reservation right now.',
+      );
+    } finally {
+      setIsSubmitting(false);
+    }
+  };
 
   return (
     <section id="services" className="py-24 bg-gray-100">
-      <div className="container mx-auto px-4 sm:px-6 lg:px-8 space-y-16">
-        <div className="text-center max-w-3xl mx-auto">
-          <p className="text-sm font-semibold text-brand-cyan uppercase tracking-widest mb-3">Our Services</p>
-          <h2 className="text-3xl md:text-4xl font-bold text-brand-dark">Tailored Steam Cleaning Packages</h2>
-          <p className="mt-4 text-lg text-gray-600">
-            Browse indoor favorites, outdoor refreshes, and custom estimate projects. Every service pairs with professional-grade equipment and eco-safe solutions.
+      <div className="container mx-auto px-4 sm:px-6 lg:px-8 space-y-12">
+        <div className="max-w-3xl mx-auto text-center space-y-4">
+          <p className="text-sm font-semibold text-brand-cyan uppercase tracking-widest">Build Your Cleaning Plan</p>
+          <h2 className="text-3xl md:text-4xl font-bold text-brand-dark">Create your custom service cart</h2>
+          <p className="text-lg text-gray-600">
+            Choose services across indoor, outdoor, automotive, or add-on specialties. Bundle multiple items, pick your preferred appointment time, and we will confirm details and charge after the visit.
           </p>
-          <p className="mt-2 text-base text-brand-dark font-semibold">$100 minimum charge per visit.</p>
-        </div>
-        <div className="space-y-10">
-          <CarpetSizeSelector />
-          <TileSizeSelector />
         </div>
 
-        {grouped.map((group) => (
-          <div key={group.id} className="space-y-8">
-            <div className="text-center md:text-left">
-              <h3 className="text-2xl font-bold text-brand-dark">{group.title}</h3>
-              <p className="text-gray-600 mt-2 max-w-2xl">{group.description}</p>
+        <div className="bg-white rounded-3xl shadow-xl p-6 md:p-10 space-y-10">
+          <div className="space-y-6">
+            <div className="flex items-baseline justify-between flex-wrap gap-4">
+              <div>
+                <p className="text-xs font-semibold uppercase tracking-widest text-brand-cyan">Step 1</p>
+                <h3 className="text-2xl font-bold text-brand-dark">Select a service category</h3>
+              </div>
+              <p className="text-sm text-gray-500 max-w-md">Switch between categories to see specially curated services. Prices shown include equipment, products, and travel.</p>
             </div>
-            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
-              {group.services.map((service) => (
-                <ServiceCard
-                  key={service.id}
-                  service={service}
-                  allowBooking={group.id !== 'estimate'}
-                  ctaMode={group.id === 'estimate' ? 'estimate' : 'book'}
-                />
-              ))}
+            <div className="grid gap-4 md:grid-cols-2 xl:grid-cols-4">
+              {CATEGORY_ORDER.map((category) => {
+                const detail = CATEGORY_DETAILS[category];
+                const isActive = selectedCategory === category;
+                return (
+                  <button
+                    key={category}
+                    type="button"
+                    onClick={() => setSelectedCategory(category)}
+                    className={`text-left rounded-2xl border transition-all p-5 h-full ${
+                      isActive
+                        ? 'bg-gradient-to-br from-brand-cyan/10 via-white to-brand-blue/5 border-brand-cyan shadow-lg'
+                        : 'border-gray-200 hover:border-brand-cyan/60 hover:shadow-md bg-white'
+                    }`}
+                    aria-pressed={isActive}
+                  >
+                    <p className="text-xs font-semibold uppercase tracking-widest text-brand-cyan mb-2">{detail.lead}</p>
+                    <p className="text-xl font-bold text-brand-dark mb-2">{detail.label}</p>
+                    <p className="text-sm text-gray-600 leading-relaxed">{detail.description}</p>
+                  </button>
+                );
+              })}
             </div>
           </div>
-        ))}
 
-        <div className="text-center text-gray-500">
-          <p>
-            All secure payments and estimates are powered by Square. Need something special? <a href="#booking" className="text-brand-cyan font-semibold">Start the conversation</a> and we will customize a plan.
-          </p>
+          <div className="space-y-6">
+            <div className="flex items-baseline justify-between flex-wrap gap-4">
+              <div>
+                <p className="text-xs font-semibold uppercase tracking-widest text-brand-cyan">Step 2</p>
+                <h3 className="text-2xl font-bold text-brand-dark">Pick the focus area</h3>
+              </div>
+              <p className="text-sm text-gray-500 max-w-md">
+                Toggle between carpet, tile, upholstery, or window offerings tailored to your selected category.
+              </p>
+            </div>
+            <div className="flex flex-wrap gap-3">
+              {availableServiceTypes.map((focus) => {
+                const detail = SERVICE_TYPE_DETAILS[focus];
+                const isActive = selectedFocus === focus;
+                return (
+                  <button
+                    key={focus}
+                    type="button"
+                    onClick={() => setSelectedFocus(focus)}
+                    className={`px-4 py-2 rounded-full border text-sm font-semibold transition-colors ${
+                      isActive
+                        ? 'bg-brand-cyan text-white border-brand-cyan shadow-md'
+                        : 'border-gray-200 text-brand-dark hover:border-brand-cyan hover:text-brand-cyan'
+                    }`}
+                    aria-pressed={isActive}
+                  >
+                    {detail.label}
+                  </button>
+                );
+              })}
+            </div>
+            <p className="text-sm text-gray-500">{SERVICE_TYPE_DETAILS[selectedFocus]?.description}</p>
+          </div>
+
+          <div className="grid gap-8 xl:grid-cols-[1.6fr_1fr]">
+            <div className="space-y-6">
+              <h4 className="text-lg font-semibold text-brand-dark">Service options</h4>
+              <div className="grid gap-6 md:grid-cols-2">
+                {servicesForSelection.map((service) => {
+                  const quantity = quantities[service.id] ?? 1;
+                  const cartLine = cartItems.find((line) => line.service.id === service.id);
+                  const subtotalCents = (service.priceCents ?? 0) * (cartLine?.quantity ?? 0);
+
+                  return (
+                    <div
+                      key={service.id}
+                      className="rounded-2xl border border-gray-200 bg-white shadow-sm hover:shadow-md transition-shadow flex flex-col"
+                    >
+                      <img
+                        src={service.imageUrl}
+                        alt={service.title}
+                        onError={(event) => {
+                          if (event.currentTarget.dataset.fallback === 'true') {
+                            return;
+                          }
+                          event.currentTarget.dataset.fallback = 'true';
+                          event.currentTarget.src = '/steam-power-hero2.jpg';
+                        }}
+                        className="w-full h-44 object-cover rounded-t-2xl"
+                      />
+                      <div className="p-5 flex flex-col gap-4 flex-grow">
+                        <div className="space-y-1">
+                          <p className="text-xs font-semibold uppercase tracking-widest text-brand-cyan">
+                            {SERVICE_TYPE_DETAILS[service.serviceType].label}
+                          </p>
+                          <h5 className="text-lg font-bold text-brand-dark">{service.title}</h5>
+                          {service.sizeLabel && (
+                            <p className="text-sm text-brand-blue font-semibold">{service.sizeLabel}</p>
+                          )}
+                        </div>
+                        <p className="text-sm text-gray-600 leading-relaxed flex-grow">{service.description}</p>
+                        <div className="space-y-3">
+                          <div className="flex items-center justify-between">
+                            <span className="text-xl font-semibold text-brand-blue">{service.price}</span>
+                            <span className="text-sm text-gray-500">{formatDuration(service.durationMinutes)}</span>
+                          </div>
+                          <div className="flex items-center gap-4">
+                            <label className="flex items-center gap-2 text-sm font-medium text-brand-dark">
+                              Qty
+                              <input
+                                type="number"
+                                min={1}
+                                max={10}
+                                value={quantity}
+                                onChange={(event) => handleQuantityChange(service.id, event.target.value)}
+                                className="w-16 border border-gray-200 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-brand-cyan"
+                              />
+                            </label>
+                            <button
+                              type="button"
+                              onClick={() => handleAddToCart(service)}
+                              className="ml-auto inline-flex items-center justify-center px-4 py-2 rounded-full bg-brand-cyan text-white text-sm font-semibold hover:bg-brand-blue transition-colors"
+                            >
+                              {cartLine ? 'Update Cart' : 'Add to Cart'}
+                            </button>
+                          </div>
+                          {cartLine && (
+                            <p className="text-xs text-gray-500">
+                              In cart • {cartLine.quantity} × {service.price} ={' '}
+                              {service.priceCents
+                                ? formatCurrency(subtotalCents)
+                                : 'Estimate pending'}
+                            </p>
+                          )}
+                        </div>
+                      </div>
+                    </div>
+                  );
+                })}
+                {servicesForSelection.length === 0 && (
+                  <div className="col-span-full text-center text-gray-500 border border-dashed border-gray-300 rounded-2xl p-8">
+                    <p className="font-semibold text-brand-dark">More services coming soon</p>
+                    <p className="text-sm mt-2">We are expanding offerings for this focus area. Pick another category or contact us for a custom quote.</p>
+                  </div>
+                )}
+              </div>
+            </div>
+
+            <aside className="space-y-6">
+              <div className="rounded-2xl border border-gray-200 bg-white shadow-sm p-5 space-y-4">
+                <div className="flex items-baseline justify-between">
+                  <div>
+                    <h4 className="text-lg font-semibold text-brand-dark">Cart summary</h4>
+                    <p className="text-xs uppercase tracking-widest text-brand-cyan">Step 3</p>
+                  </div>
+                  <span className="text-sm text-gray-500">
+                    {cartItems.length} item{cartItems.length === 1 ? '' : 's'}
+                  </span>
+                </div>
+                <div className="space-y-4">
+                  {cartItems.length === 0 && <p className="text-sm text-gray-500">Add at least one service to start your booking.</p>}
+                  {cartItems.map((line) => {
+                    const hasUnitPrice = typeof line.service.priceCents === 'number' && line.service.priceCents > 0;
+                    const lineSubtotal = (line.service.priceCents ?? 0) * line.quantity;
+                    const lineTotalLabel = hasUnitPrice ? formatCurrency(lineSubtotal) : 'Estimate pending';
+                    return (
+                      <div key={line.service.id} className="rounded-xl border border-gray-100 p-4 space-y-3">
+                        <div className="flex items-start justify-between gap-2">
+                          <div>
+                            <p className="text-sm font-semibold text-brand-dark">{line.service.title}</p>
+                            {line.service.sizeLabel && (
+                              <p className="text-xs text-gray-500">{line.service.sizeLabel}</p>
+                            )}
+                          </div>
+                          <button
+                            type="button"
+                            onClick={() => removeFromCart(line.service.id)}
+                            className="text-xs font-semibold text-brand-cyan hover:text-brand-blue"
+                          >
+                            Remove
+                          </button>
+                        </div>
+                        <div className="flex items-center justify-between text-sm text-gray-600">
+                          <div className="flex items-center gap-2">
+                            <button
+                              type="button"
+                              onClick={() => incrementCartItem(line.service, -1)}
+                              className="w-7 h-7 inline-flex items-center justify-center rounded-full border border-gray-200 hover:border-brand-cyan"
+                              aria-label={`Reduce quantity for ${line.service.title}`}
+                            >
+                              −
+                            </button>
+                            <span className="font-semibold text-brand-dark">{line.quantity}</span>
+                            <button
+                              type="button"
+                              onClick={() => incrementCartItem(line.service, 1)}
+                              className="w-7 h-7 inline-flex items-center justify-center rounded-full border border-gray-200 hover:border-brand-cyan"
+                              aria-label={`Increase quantity for ${line.service.title}`}
+                            >
+                              +
+                            </button>
+                          </div>
+                          <span className="font-semibold text-brand-blue">{lineTotalLabel}</span>
+                        </div>
+                      </div>
+                    );
+                  })}
+                </div>
+                <div className="border-t border-gray-200 pt-4 space-y-2 text-sm">
+                  <div className="flex justify-between text-brand-dark font-semibold">
+                    <span>Estimated total</span>
+                    <span>{totalPriceCents > 0 ? formatCurrency(totalPriceCents) : 'Estimate pending'}</span>
+                  </div>
+                  <div className="flex justify-between text-gray-500">
+                    <span>Service time</span>
+                    <span>{totalDurationMinutes ? formatDuration(totalDurationMinutes) : 'TBD'}</span>
+                  </div>
+                  <p className="text-xs text-gray-500">Final charges occur after the service is completed and verified on-site.</p>
+                </div>
+              </div>
+
+              <form className="rounded-2xl border border-gray-200 bg-white shadow-sm p-5 space-y-4">
+                <div className="flex items-baseline justify-between">
+                  <h4 className="text-lg font-semibold text-brand-dark">Reserve your time</h4>
+                  <p className="text-xs uppercase tracking-widest text-brand-cyan">Step 4</p>
+                </div>
+                <div className="grid gap-4">
+                  <label className="text-sm font-medium text-brand-dark space-y-1">
+                    Name
+                    <input
+                      type="text"
+                      value={customerName}
+                      onChange={(event) => {
+                        setCustomerName(event.target.value);
+                        setSubmissionError(null);
+                        setConfirmation(null);
+                      }}
+                      placeholder="How should we address you?"
+                      className="w-full border border-gray-200 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-brand-cyan"
+                    />
+                  </label>
+                  <label className="text-sm font-medium text-brand-dark space-y-1">
+                    Email
+                    <input
+                      type="email"
+                      value={customerEmail}
+                      onChange={(event) => {
+                        setCustomerEmail(event.target.value);
+                        setSubmissionError(null);
+                        setConfirmation(null);
+                      }}
+                      placeholder="we'll send confirmation here"
+                      className="w-full border border-gray-200 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-brand-cyan"
+                    />
+                  </label>
+                  <label className="text-sm font-medium text-brand-dark space-y-1">
+                    Phone (optional)
+                    <input
+                      type="tel"
+                      value={customerPhone}
+                      onChange={(event) => {
+                        setCustomerPhone(event.target.value);
+                        setSubmissionError(null);
+                        setConfirmation(null);
+                      }}
+                      placeholder="Helpful for day-of updates"
+                      className="w-full border border-gray-200 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-brand-cyan"
+                    />
+                  </label>
+                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
+                    <label className="text-sm font-medium text-brand-dark space-y-1">
+                      Preferred date
+                      <input
+                        type="date"
+                        value={serviceDate}
+                        onChange={(event) => {
+                          setServiceDate(event.target.value);
+                          setSubmissionError(null);
+                          setConfirmation(null);
+                        }}
+                        className="w-full border border-gray-200 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-brand-cyan"
+                      />
+                    </label>
+                    <label className="text-sm font-medium text-brand-dark space-y-1">
+                      Preferred start time
+                      <input
+                        type="time"
+                        value={serviceTime}
+                        onChange={(event) => {
+                          setServiceTime(event.target.value);
+                          setSubmissionError(null);
+                          setConfirmation(null);
+                        }}
+                        className="w-full border border-gray-200 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-brand-cyan"
+                      />
+                    </label>
+                  </div>
+                  <label className="text-sm font-medium text-brand-dark space-y-1">
+                    Time zone
+                    <select
+                      value={timeZone}
+                      onChange={(event) => {
+                        setTimeZone(event.target.value);
+                        setSubmissionError(null);
+                        setConfirmation(null);
+                      }}
+                      className="w-full border border-gray-200 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-brand-cyan"
+                    >
+                      {TIME_ZONE_OPTIONS.map((zone) => (
+                        <option key={zone} value={zone}>
+                          {zone.replace('_', ' ')}
+                        </option>
+                      ))}
+                    </select>
+                  </label>
+                  <label className="text-sm font-medium text-brand-dark space-y-1">
+                    Notes for our technicians (optional)
+                    <textarea
+                      value={customerNotes}
+                      onChange={(event) => {
+                        setCustomerNotes(event.target.value);
+                        setSubmissionError(null);
+                      }}
+                      rows={3}
+                      placeholder="Gate codes, parking instructions, pets we should greet, or specific problem areas."
+                      className="w-full border border-gray-200 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-brand-cyan"
+                    />
+                  </label>
+                </div>
+                <button
+                  type="button"
+                  onClick={handleReservation}
+                  className={`w-full inline-flex items-center justify-center rounded-full py-3 text-sm font-semibold transition-colors ${
+                    isReadyToReserve && !isSubmitting
+                      ? 'bg-brand-cyan text-white hover:bg-brand-blue'
+                      : 'bg-gray-200 text-gray-500 cursor-not-allowed'
+                  }`}
+                  disabled={!isReadyToReserve || isSubmitting}
+                  aria-busy={isSubmitting}
+                >
+                  {isSubmitting ? 'Submitting...' : 'Review & Confirm'}
+                </button>
+                <div className="space-y-2">
+                  {submissionError && (
+                    <p className="text-xs text-red-600" role="alert">
+                      {submissionError}
+                    </p>
+                  )}
+                  {confirmation && (
+                    <div className="rounded-xl border border-brand-cyan/40 bg-brand-cyan/10 px-4 py-3 text-xs text-brand-dark space-y-1">
+                      <p className="font-semibold text-sm text-brand-dark">
+                        Reservation received for {formatAppointmentWindow(confirmation.startTime, confirmation.timeZone)}.
+                      </p>
+                      <p>
+                        Estimated total {confirmation.totalPriceCents > 0 ? formatCurrency(confirmation.totalPriceCents) : 'Estimate pending'} •
+                        {confirmation.durationMinutes ? ` ${formatDuration(confirmation.durationMinutes)} on site` : ' Time TBD'}.
+                      </p>
+                      <p>
+                        {confirmation.emailSent
+                          ? 'A confirmation email is on its way.'
+                          : 'We were unable to email a confirmation automatically. We will follow up shortly.'}
+                      </p>
+                      {confirmation.calendarUrl && (
+                        <a
+                          href={confirmation.calendarUrl}
+                          target="_blank"
+                          rel="noopener noreferrer"
+                          className="inline-flex text-brand-cyan font-semibold hover:text-brand-blue"
+                        >
+                          View calendar event
+                        </a>
+                      )}
+                    </div>
+                  )}
+                  <p className="text-xs text-gray-500">
+                    We will verify availability, email a confirmation with your appointment details, and capture payment after service completion.
+                  </p>
+                </div>
+              </form>
+            </aside>
+          </div>
         </div>
       </div>
     </section>
diff --git a/components/SquareBooking.tsx b/components/SquareBooking.tsx
deleted file mode 100644
index 8d3a014..0000000
--- a/components/SquareBooking.tsx
+++ /dev/null
@@ -1,288 +0,0 @@
-import React, { useEffect, useRef, useState } from 'react';
-import { SERVICES } from '../constants';
-
-const SQUARE_APP_ID = import.meta.env.VITE_SQUARE_APP_ID || 'sandbox-sq0idb-RxBonLpvkHQlaqapzNBrQA';
-const SQUARE_LOCATION_ID = import.meta.env.VITE_SQUARE_LOCATION_ID || 'REPLACE_WITH_YOUR_SANDBOX_LOCATION_ID';
-const SQUARE_SCRIPT_URL = 'https://sandbox.web.squarecdn.com/v1/square.js';
-
-interface TokenResult {
-  status: string;
-  token?: string;
-  errors?: Array<{ detail?: string; message?: string }>;
-}
-
-interface SquareCard {
-  attach: (selector: string | HTMLElement) => Promise<void>;
-  tokenize: () => Promise<TokenResult>;
-  destroy?: () => void;
-}
-
-declare global {
-  interface Window {
-    Square?: {
-      payments: (applicationId: string, locationId: string) => {
-        card: () => Promise<SquareCard>;
-      };
-    };
-  }
-}
-
-let squareScriptPromise: Promise<void> | null = null;
-
-const loadSquareScript = () => {
-  if (typeof window === 'undefined') {
-    return Promise.reject(new Error('Square SDK can only load in the browser.'));
-  }
-
-  if (window.Square) {
-    return Promise.resolve();
-  }
-
-  if (!squareScriptPromise) {
-    squareScriptPromise = new Promise((resolve, reject) => {
-      const existing = document.getElementById('square-payments-sdk');
-      if (existing) {
-        existing.addEventListener('load', () => resolve());
-        existing.addEventListener('error', () => reject(new Error('Failed to load Square SDK script.')));
-        return;
-      }
-
-      const script = document.createElement('script');
-      script.id = 'square-payments-sdk';
-      script.src = SQUARE_SCRIPT_URL;
-      script.async = true;
-      script.onload = () => resolve();
-      script.onerror = () => reject(new Error('Failed to load Square SDK script.'));
-      document.head.appendChild(script);
-    });
-  }
-
-  return squareScriptPromise;
-};
-
-const SquareBooking: React.FC = () => {
-  const [card, setCard] = useState<SquareCard | null>(null);
-  const [status, setStatus] = useState<'idle' | 'loading' | 'ready' | 'error'>('idle');
-  const [message, setMessage] = useState<string>('');
-  const [token, setToken] = useState<string>('');
-  const [isSubmitting, setIsSubmitting] = useState(false);
-  const [serviceIndex, setServiceIndex] = useState(0);
-  const [serverStatus, setServerStatus] = useState<string>('');
-  const cardContainerRef = useRef<HTMLDivElement | null>(null);
-  const missingLocation = !SQUARE_LOCATION_ID || SQUARE_LOCATION_ID.startsWith('REPLACE');
-  const selectedService = SERVICES[serviceIndex];
-  const serviceSupportsInstantCheckout = typeof selectedService?.priceCents === 'number' && (selectedService?.priceCents ?? 0) > 0;
-
-  useEffect(() => {
-    let isMounted = true;
-    let mountedCard: SquareCard | null = null;
-
-    const init = async () => {
-      if (!window.isSecureContext) {
-        setStatus('error');
-        setMessage('The Web Payments SDK requires HTTPS or localhost.');
-        return;
-      }
-
-      setStatus('loading');
-      try {
-        await loadSquareScript();
-        if (!window.Square) {
-          throw new Error('Square SDK did not load.');
-        }
-
-        const payments = window.Square.payments(SQUARE_APP_ID, SQUARE_LOCATION_ID);
-        const cardInstance = await payments.card();
-        await cardInstance.attach('#card-container');
-
-        if (!isMounted) {
-          cardInstance.destroy?.();
-          return;
-        }
-
-        mountedCard = cardInstance;
-        setCard(cardInstance);
-        setStatus('ready');
-        setMessage('Enter card details using the Square secure field.');
-      } catch (error) {
-        const fallback = error instanceof Error ? error.message : 'Unable to initialize Square payments.';
-        setStatus('error');
-        setMessage(fallback);
-      }
-    };
-
-    if (!missingLocation) {
-      init();
-    }
-
-    return () => {
-      isMounted = false;
-      mountedCard?.destroy?.();
-    };
-  }, [missingLocation]);
-
-  const sendTokenToBackend = async (nonce: string) => {
-    try {
-      const response = await fetch('/api/square/checkout', {
-        method: 'POST',
-        headers: {
-          'Content-Type': 'application/json',
-        },
-        body: JSON.stringify({
-          token: nonce,
-          serviceId: selectedService.id,
-        }),
-      });
-
-      const payload = await response.json();
-      if (!response.ok) {
-        throw new Error(payload.error || 'Square sandbox payment failed.');
-      }
-
-      const paymentId = payload.payment?.id ? `Payment ID: ${payload.payment.id}` : '';
-      setServerStatus(`Sandbox payment created. ${paymentId}`.trim());
-    } catch (error) {
-      const fallback = error instanceof Error ? error.message : 'Unable to reach the Steam Powered API server.';
-      setServerStatus(fallback);
-      throw error;
-    }
-  };
-
-  const handleSubmit = async (event: React.FormEvent) => {
-    event.preventDefault();
-    if (!card) {
-      return;
-    }
-    if (!serviceSupportsInstantCheckout) {
-      setMessage('Select a service with a fixed price or use the Square link for custom-quoted jobs.');
-      return;
-    }
-
-    setIsSubmitting(true);
-    setMessage(`Tokenizing card for ${selectedService.title}...`);
-    setToken('');
-    setServerStatus('');
-    try {
-      const result = await card.tokenize();
-      if (result.status === 'OK' && result.token) {
-        setToken(result.token);
-        setMessage('Success! Sending token to Steam Powered API...');
-        await sendTokenToBackend(result.token);
-        setMessage('Payment submitted to Square sandbox successfully.');
-      } else if (result.errors?.length) {
-        const detail = result.errors.map((err) => err.detail || err.message || 'Unknown error').join('\n');
-        setMessage(detail);
-      } else {
-        setMessage('Unable to tokenize card.');
-      }
-    } catch (error) {
-      if (!(error instanceof Error && /Square sandbox payment failed|Unable to reach/.test(error.message))) {
-        const fallback = error instanceof Error ? error.message : 'Unexpected error while tokenizing card.';
-        setMessage(fallback);
-      }
-    } finally {
-      setIsSubmitting(false);
-    }
-  };
-
-  return (
-    <section id="booking" className="py-20 bg-white">
-      <div className="container mx-auto px-4 sm:px-6 lg:px-8">
-        <div className="grid grid-cols-1 lg:grid-cols-2 gap-12 items-center">
-          <div>
-            <p className="text-sm font-semibold text-brand-cyan uppercase tracking-widest mb-3">Secure Booking</p>
-            <h2 className="text-3xl md:text-4xl font-bold text-brand-dark mb-6">Reserve Your Steam Cleaning Visit</h2>
-            <p className="text-lg text-gray-600 mb-4">
-              Use our Square-powered checkout to securely share your preferred payment method before the appointment. We use the sandbox environment for testing, so you can try it with Square's sample cards.
-            </p>
-            <ul className="space-y-3 text-gray-600">
-              <li>• 256-bit encryption handled by Square</li>
-              <li>• Works on modern browsers (no IE11 support)</li>
-              <li>• Requires HTTPS or localhost for security</li>
-            </ul>
-          </div>
-          <div className="bg-gray-50 rounded-2xl shadow-lg p-8">
-            {missingLocation ? (
-              <div className="text-center">
-                <p className="text-lg font-semibold text-brand-dark mb-2">Add your Square location ID</p>
-                <p className="text-gray-600">
-                  Set <code className="bg-gray-200 px-1 rounded">VITE_SQUARE_LOCATION_ID</code> in your <code className="bg-gray-200 px-1 rounded">.env</code> file to finish the connection.
-                </p>
-              </div>
-            ) : (
-              <form onSubmit={handleSubmit} className="space-y-6">
-                <div>
-                  <label htmlFor="service" className="block text-sm font-semibold text-brand-dark mb-2">Service</label>
-                  <select
-                    id="service"
-                    value={serviceIndex}
-                    onChange={(event) => setServiceIndex(Number(event.target.value))}
-                    className="w-full border border-gray-200 rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-brand-cyan bg-white"
-                  >
-                    {SERVICES.map((service, index) => (
-                      <option key={service.id} value={index}>
-                        {service.title} — {service.price}
-                      </option>
-                    ))}
-                  </select>
-                  <p className="mt-2 text-sm text-gray-500">{selectedService.description}</p>
-                  {!serviceSupportsInstantCheckout && (
-                    <p className="mt-2 text-sm text-brand-dark">
-                      Pricing is custom for this item. Use the Square link below or contact us for a quote.
-                    </p>
-                  )}
-                </div>
-                <div>
-                  <label htmlFor="card-container" className="block text-sm font-semibold text-brand-dark mb-2">
-                    Card details
-                  </label>
-                  <div
-                    id="card-container"
-                    ref={cardContainerRef}
-                    className="rounded-lg border border-dashed border-brand-light-blue bg-white px-4 py-5"
-                  ></div>
-                </div>
-                <button
-                  type="submit"
-                  disabled={status !== 'ready' || isSubmitting || !serviceSupportsInstantCheckout}
-                  className="w-full py-3 rounded-full font-semibold text-white bg-brand-cyan hover:bg-brand-blue transition-colors disabled:opacity-60"
-                >
-                  {isSubmitting ? 'Processing...' : 'Generate Secure Token'}
-                </button>
-                <div className="text-sm text-gray-600 whitespace-pre-wrap min-h-[3rem]">
-                  {message || (status === 'loading' ? 'Loading secure fields…' : '')}
-                </div>
-                {serverStatus && (
-                  <div className="text-sm text-brand-dark bg-white border border-brand-light-blue rounded-lg p-3">
-                    {serverStatus}
-                  </div>
-                )}
-                {token && (
-                  <div className="bg-white border border-brand-light-blue rounded-lg p-3 text-sm space-y-1">
-                    <div className="font-semibold text-brand-dark">Token:</div>
-                    <div className="font-mono break-all">{token}</div>
-                    <div className="text-xs text-gray-500">
-                      Stored securely on the server only long enough to call Square's Payments API.
-                    </div>
-                  </div>
-                )}
-                {selectedService.squareLink && (
-                  <a
-                    href={selectedService.squareLink}
-                    target="_blank"
-                    rel="noopener noreferrer"
-                    className="block text-center border border-brand-cyan text-brand-cyan hover:bg-brand-cyan hover:text-white font-semibold py-3 rounded-full transition-colors"
-                  >
-                    Book {selectedService.title} on Square
-                  </a>
-                )}
-              </form>
-            )}
-          </div>
-        </div>
-      </div>
-    </section>
-  );
-};
-
-export default SquareBooking;
diff --git a/data/services.ts b/data/services.ts
index 3664a11..16c7348 100644
--- a/data/services.ts
+++ b/data/services.ts
@@ -1,172 +1,493 @@
 import type { Service } from '../types';
 
 export const SERVICES: Service[] = [
+  // Indoor – Carpet Cleaning by room size
   {
-    id: 'stone-surfaces',
-    title: 'Stone Surfaces',
-    description: 'Restore the look of your driveway and paths. Our high-pressure steam removes grime, oil, and stains from Stone Surfaces.',
-    price: 'Price Varies',
-    priceCents: null,
-    imageUrl: '/services/stone-surfaces.jpg',
-    squareLink: 'https://square.link/u/kgXNSrEE',
-    category: 'outdoor',
+    id: 'carpet-xs-room',
+    title: 'X-Small Room Carpet Cleaning',
+    sizeLabel: 'Up to 120 sq ft',
+    description: 'Perfect for nurseries, closets, and compact bedrooms. Includes spot treatment for high-use areas.',
+    price: '$40.00',
+    priceCents: 4000,
+    durationMinutes: 45,
+    imageUrl: '/services/new-pictures/x-small-room-carpet-cleaning.jpg',
+    category: 'indoor',
+    serviceType: 'carpet',
   },
   {
-    id: 'brick-paver-surfaces',
-    title: 'Bricks/Pavers Surfaces',
-    description: 'Deep cleaning for brick and paver patios, walkways, and driveways to remove moss, dirt, and discoloration.',
-    price: 'Price Varies',
-    priceCents: null,
-    imageUrl: '/services/brick-paver-surfaces.jpg',
-    category: 'outdoor',
+    id: 'carpet-small-room',
+    title: 'Small Room Carpet Cleaning',
+    sizeLabel: '120–199 sq ft',
+    description: 'A thorough steam clean for bedrooms or small living areas to remove soil, allergens, and odors.',
+    price: '$60.00',
+    priceCents: 6000,
+    durationMinutes: 55,
+    imageUrl: '/services/new-pictures/small-room-carpet.png',
+    category: 'indoor',
+    serviceType: 'carpet',
   },
   {
-    id: 'concrete-surfaces',
-    title: 'Concrete Surfaces',
-    description: 'Revitalize your concrete areas. We effectively remove tough stains from garage floors, sidewalks, and patios.',
-    price: 'Price Varies',
-    priceCents: null,
-    imageUrl: '/services/concrete-surfaces.jpg',
-    category: 'outdoor',
+    id: 'carpet-medium-room',
+    title: 'Medium Room Carpet Cleaning',
+    sizeLabel: '200–299 sq ft',
+    description: 'Ideal for standard living rooms or offices. Includes pretreating traffic lanes for a uniform finish.',
+    price: '$80.00',
+    priceCents: 8000,
+    durationMinutes: 70,
+    imageUrl: '/services/new-pictures/medium-room-carpet-cleaning.jpg',
+    category: 'indoor',
+    serviceType: 'carpet',
   },
   {
-    id: 'deck-and-patio-wash',
-    title: 'Deck & Patio Wash',
-    description: 'Restore composite, tile, or wooden patios with a gentle but effective exterior wash.',
-    price: '$150.00',
-    priceCents: 15000,
-    imageUrl: '/services/deck-and-patio-wash.jpg',
-    squareLink: 'https://square.link/u/wgdWAwE0',
-    category: 'outdoor',
+    id: 'carpet-large-room',
+    title: 'Large Room Carpet Cleaning',
+    sizeLabel: '300–350 sq ft',
+    description: 'Recommended for great rooms and gathering spaces. Restores color, lifts stains, and deodorizes.',
+    price: '$100.00',
+    priceCents: 10000,
+    durationMinutes: 90,
+    imageUrl: '/services/new-pictures/large-room-carpet-cleaning.jpg',
+    category: 'indoor',
+    serviceType: 'carpet',
   },
+
+  // Indoor – Area Rug Cleaning
   {
-    id: 'driveway-refresh',
-    title: 'Driveway Refresh',
-    description: 'Cut through oil spots and grime on standard concrete driveways up to 600 sq ft.',
-    price: '$140.00',
-    priceCents: 14000,
-    imageUrl: '/services/driveway-refresh.jpg',
-    squareLink: 'https://square.link/u/qDOMDmld',
-    category: 'outdoor',
+    id: 'area-rug-onsite',
+    title: 'Area Rug Cleaning (On-Site)',
+    description: 'Convenient maintenance cleaning performed in your home for area rugs that need a freshen up.',
+    price: 'Starting at $50.00',
+    priceCents: 5000,
+    durationMinutes: 60,
+    imageUrl: '/services/new-pictures/small-room-carpet.png',
+    category: 'indoor',
+    serviceType: 'area_rug',
   },
   {
-    id: 'sedan-detail',
-    title: 'Full Car Interior+Exterior (Sedan)',
-    description: 'Complete detailing for your sedan. We steam clean inside and out, leaving your car spotless and sanitized.',
-    price: '$200.00',
-    priceCents: 20000,
-    imageUrl: '/services/sedan-detail.jpg',
-    squareLink: 'https://square.link/u/PTl9dzNt',
-    category: 'automotive',
+    id: 'area-rug-offsite',
+    title: 'Area Rug Deep Cleaning (Off-Site)',
+    description: 'Our deepest clean: we pick up, treat both sides, neutralize odors, and return your rug looking new. Priced at 2× on-site rate.',
+    price: 'Starting at $100.00',
+    priceCents: 10000,
+    durationMinutes: 0,
+    imageUrl: '/services/new-pictures/large-room-carpet-cleaning.jpg',
+    category: 'indoor',
+    serviceType: 'area_rug',
   },
+
+  // Indoor – Tile & Grout Cleaning
   {
-    id: 'hallway-carpet',
-    title: 'Hallway Carpet',
-    description: 'High-traffic hallway carpets cleaned and refreshed, removing footprints and accumulated dirt.',
-    price: '$20.00',
-    priceCents: 2000,
-    imageUrl: '/services/hallway-carpet.jpg',
-    squareLink: 'https://square.link/u/EZhJGCGD',
+    id: 'tile-xs-room',
+    title: 'X-Small Tile & Grout Cleaning',
+    sizeLabel: 'Up to 120 sq ft',
+    description: 'Great for powder rooms or foyers. Removes residue from grout lines and restores sheen.',
+    price: '$45.00',
+    priceCents: 4500,
+    durationMinutes: 50,
+    imageUrl: '/services/new-pictures/x-small-room-tile-cleaning.jpg',
     category: 'indoor',
+    serviceType: 'tile',
   },
   {
-    id: 'hallway-tile',
-    title: 'Hallway Tile',
-    description: 'Brighten your hallways by steam cleaning tile and grout, lifting away dirt for a pristine finish.',
-    price: '$35.00',
-    priceCents: 3500,
-    imageUrl: '/services/hallway-tile.jpg',
-    squareLink: 'https://square.link/u/QHKgHnNk',
+    id: 'tile-small-room',
+    title: 'Small Tile & Grout Cleaning',
+    sizeLabel: '120–199 sq ft',
+    description: 'Kitchen or bath refresh with targeted grout agitation and neutralizing rinse.',
+    price: '$60.00',
+    priceCents: 6000,
+    durationMinutes: 65,
+    imageUrl: '/services/new-pictures/small-room-tile-cleaning.jpg',
+    category: 'indoor',
+    serviceType: 'tile',
+  },
+  {
+    id: 'tile-medium-room',
+    title: 'Medium Tile & Grout Cleaning',
+    sizeLabel: '200–299 sq ft',
+    description: 'For larger kitchens or laundry rooms. Penetrates grout lines and seals in a lasting clean.',
+    price: '$85.00',
+    priceCents: 8500,
+    durationMinutes: 80,
+    imageUrl: '/services/new-pictures/medium-room-tile-cleaning.jpg',
     category: 'indoor',
+    serviceType: 'tile',
   },
   {
-    id: 'large-room-carpet',
-    title: 'Large Room Carpet (300-350sqft)',
-    description: 'Deep steam cleaning for large carpets, removing allergens and stains from your living space.',
+    id: 'tile-large-room',
+    title: 'Large Tile & Grout Cleaning',
+    sizeLabel: '300–350 sq ft',
+    description: 'Full-room treatment with steam agitation, extraction, and quick dry assist.',
     price: '$100.00',
     priceCents: 10000,
-    imageUrl: '/services/large-room-carpet.jpg',
-    squareLink: 'https://square.link/u/wRQxGrl5',
+    durationMinutes: 95,
+    imageUrl: '/services/new-pictures/large-room-tile-cleaning.jpg',
+    category: 'indoor',
+    serviceType: 'tile',
+  },
+
+  // Indoor – Upholstery Cleaning
+  {
+    id: 'upholstery-chair',
+    title: 'Chair Cleaning',
+    description: 'Single armchair or accent chair cleaned with fabric-safe solution and quick dry finish.',
+    price: '$45.00',
+    priceCents: 4500,
+    durationMinutes: 35,
+    imageUrl: '/services/new-pictures/sofa-chair-cleaning.jpg',
+    category: 'indoor',
+    serviceType: 'upholstery',
+  },
+  {
+    id: 'upholstery-loveseat',
+    title: 'Loveseat Cleaning',
+    description: 'Complete two-seat refresh targeting armrests, cushions, and high-touch zones.',
+    price: '$70.00',
+    priceCents: 7000,
+    durationMinutes: 55,
+    imageUrl: '/services/new-pictures/loveseat-cleaning.jpg',
     category: 'indoor',
+    serviceType: 'upholstery',
   },
   {
-    id: 'large-room-tile',
-    title: 'Large Room Tile (300-350sqft)',
-    description: 'Expert cleaning for large tiled areas. We make your tile and grout lines look new again.',
-    price: '$105.00',
-    priceCents: 10500,
-    imageUrl: '/services/large-room-tile.jpg',
-    squareLink: 'https://square.link/u/5hebHDj3',
+    id: 'upholstery-sofa',
+    title: 'Sofa Cleaning',
+    description: 'Three-seat sofa cleaning with deodorizer and fiber grooming for even texture.',
+    price: '$95.00',
+    priceCents: 9500,
+    durationMinutes: 70,
+    imageUrl: '/services/new-pictures/sofa-cleaning.jpg',
     category: 'indoor',
+    serviceType: 'upholstery',
   },
   {
-    id: 'large-sectional',
-    title: 'Large Sectional',
-    description: 'Full cleaning for large sectional sofas, removing dirt, dust, and stains from every cushion and corner.',
+    id: 'upholstery-small-sectional',
+    title: 'Small Sectional Cleaning',
+    description: 'Refreshes a two-piece sectional with focus on corners and lounge sections.',
+    price: '$125.00',
+    priceCents: 12500,
+    durationMinutes: 90,
+    imageUrl: '/services/new-pictures/small-sectional-cleaning.jpg',
+    category: 'indoor',
+    serviceType: 'upholstery',
+  },
+  {
+    id: 'upholstery-large-sectional',
+    title: 'Large Sectional Cleaning',
+    description: 'Cleans expansive multi-piece sectionals, removing spills and restoring brightness.',
     price: '$180.00',
     priceCents: 18000,
-    imageUrl: '/services/large-sectional.jpg',
-    squareLink: 'https://square.link/u/RnMPYGFr',
+    durationMinutes: 130,
+    imageUrl: '/services/new-pictures/large-sectional-cleaning.jpg',
     category: 'indoor',
+    serviceType: 'upholstery',
   },
   {
-    id: 'loveseat',
-    title: 'Loveseat',
-    description: 'Gentle yet effective steam cleaning for your loveseat, restoring its color and freshness.',
-    price: '$70.00',
-    priceCents: 7000,
-    imageUrl: '/services/loveseat.jpg',
-    squareLink: 'https://square.link/u/nYsKSLdi',
+    id: 'upholstery-ottoman',
+    title: 'Ottoman Cleaning',
+    description: 'Finishing touch that tackles footstools and ottomans to match refreshed seating.',
+    price: '$35.00',
+    priceCents: 3500,
+    durationMinutes: 25,
+    imageUrl: '/services/new-pictures/ottoman.jpg',
     category: 'indoor',
+    serviceType: 'upholstery',
   },
   {
-    id: 'medium-room-carpet',
-    title: 'Medium Room Carpet (200-299sqft)',
-    description: 'Perfect for bedrooms and offices, this service revitalizes your medium-sized carpets.',
-    price: '$80.00',
-    priceCents: 8000,
-    imageUrl: '/services/medium-room-carpet.jpg',
-    squareLink: 'https://square.link/u/ePFJZY2G',
+    id: 'upholstery-dining-chair',
+    title: 'Dining Chair Cleaning',
+    description: 'Per-chair pricing for dining sets. Combine quantities for bundled tables and seating.',
+    price: '$25.00',
+    priceCents: 2500,
+    durationMinutes: 15,
+    imageUrl: '/services/new-pictures/medium-window-cleaning.jpg',
     category: 'indoor',
+    serviceType: 'upholstery',
   },
   {
-    id: 'medium-room-tile',
-    title: 'Medium Room Tile (200-299sqft)',
-    description: 'Thorough tile and grout cleaning for medium-sized rooms like kitchens and bathrooms.',
-    price: '$85.00',
-    priceCents: 8500,
-    imageUrl: '/services/medium-room-tile.jpg',
-    squareLink: 'https://square.link/u/aOTqHKqs',
+    id: 'mattress-twin',
+    title: 'Twin Mattress Cleaning',
+    description: 'Removes dust mites, spills, and odors from twin mattresses. Includes sanitizing rinse.',
+    price: '$40.00',
+    priceCents: 4000,
+    durationMinutes: 35,
+    imageUrl: '/services/new-pictures/twin-mattress-cleaning.jpg',
     category: 'indoor',
+    serviceType: 'upholstery',
   },
   {
-    id: 'one-seater-sofa',
-    title: 'One Seater Sofa',
-    description: 'Individual armchair or single-seater sofa cleaning to remove spots and refresh the fabric.',
-    price: '$45.00',
-    priceCents: 4500,
-    imageUrl: '/services/one-seater-sofa.jpg',
-    squareLink: 'https://square.link/u/iAcAhZIJ',
+    id: 'mattress-full',
+    title: 'Full Mattress Cleaning',
+    description: 'Steam cleaning and extraction for full-sized beds, leaving a fresher sleep surface.',
+    price: '$50.00',
+    priceCents: 5000,
+    durationMinutes: 45,
+    imageUrl: '/services/new-pictures/full-mattress-cleaning.jpg',
     category: 'indoor',
+    serviceType: 'upholstery',
   },
   {
-    id: 'ottoman',
-    title: 'Ottoman',
-    description: "Don't forget the details! We clean ottomans and footstools to complete your furniture set.",
+    id: 'mattress-queen',
+    title: 'Queen Mattress Cleaning',
+    description: 'Full mattress treatment that neutralizes lingering odors and dries quickly.',
+    price: '$60.00',
+    priceCents: 6000,
+    durationMinutes: 55,
+    imageUrl: '/services/new-pictures/queen-mattress-cleaning.jpg',
+    category: 'indoor',
+    serviceType: 'upholstery',
+  },
+  {
+    id: 'mattress-king',
+    title: 'King Mattress Cleaning',
+    description: 'Premium service for oversized beds. Includes deodorizer and allergen reduction.',
+    price: '$75.00',
+    priceCents: 7500,
+    durationMinutes: 70,
+    imageUrl: '/services/new-pictures/king-mattress-cleaning.jpg',
+    category: 'indoor',
+    serviceType: 'upholstery',
+  },
+
+  // Indoor – Window Cleaning
+  {
+    id: 'window-small',
+    title: 'Small Window Cleaning',
+    sizeLabel: 'Up to 3×3 ft (per window)',
+    description: 'Great for bathroom or hallway windows. Quantity discounts auto-apply at scheduling time.',
+    price: '$10.00',
+    priceCents: 1000,
+    durationMinutes: 10,
+    imageUrl: '/services/new-pictures/small-window-cleaning.jpg',
+    category: 'indoor',
+    serviceType: 'windows',
+  },
+  {
+    id: 'window-medium',
+    title: 'Medium Window Cleaning',
+    sizeLabel: 'Up to 3×5 ft (per window)',
+    description: 'Standard living room or bedroom windows wiped, detailed, and left streak-free.',
+    price: '$15.00',
+    priceCents: 1500,
+    durationMinutes: 12,
+    imageUrl: '/services/new-pictures/medium-window-cleaning.jpg',
+    category: 'indoor',
+    serviceType: 'windows',
+  },
+  {
+    id: 'window-large',
+    title: 'Large Window Cleaning',
+    sizeLabel: 'Up to 5×7 ft (per window)',
+    description: 'Picture windows and sliders detailed with track cleaning and wipe-down of frames.',
     price: '$20.00',
     priceCents: 2000,
-    imageUrl: '/services/ottoman.jpg',
-    squareLink: 'https://square.link/u/rlSB6vEF',
+    durationMinutes: 15,
+    imageUrl: '/services/new-pictures/large-window-cleaning.jpg',
     category: 'indoor',
+    serviceType: 'windows',
   },
   {
-    id: 'small-room-carpet',
-    title: 'Small Room Carpet (120-199sqft)',
-    description: 'Ideal for smaller rooms or area rugs, ensuring a deep and thorough clean.',
-    price: '$60.00',
-    priceCents: 6000,
-    imageUrl: '/services/small-room-carpet.jpg',
-    squareLink: 'https://square.link/u/HrqFaF6d',
+    id: 'window-xl',
+    title: 'Extra-Large Window Cleaning',
+    sizeLabel: '7 ft+ (per window)',
+    description: 'Floor-to-ceiling glass or oversized panes. Includes ladder work and detail finishing.',
+    price: '$25.00',
+    priceCents: 2500,
+    durationMinutes: 18,
+    imageUrl: '/services/new-pictures/x-large-window-cleaning.jpg',
     category: 'indoor',
+    serviceType: 'windows',
+  },
+
+  // Outdoor – Power Washing & Exterior Services
+  {
+    id: 'powerwash-house',
+    title: 'House Wash (Vinyl/Aluminum/Wood/Brick/Stucco)',
+    description: 'Soft-wash or power-wash tailored to your siding material. Quote provided after inspection.',
+    price: 'Estimate Required',
+    priceCents: null,
+    durationMinutes: 180,
+    imageUrl: '/services/new-pictures/garage-floor-degrease-power-wash.jpg',
+    category: 'outdoor',
+    serviceType: 'powerwash',
+  },
+  {
+    id: 'powerwash-driveway',
+    title: 'Driveway & Walkway Cleaning',
+    description: 'Concrete, asphalt, pavers, or stone. Removes mildew, gum, oil spots, and general grime.',
+    price: 'Estimate Required',
+    priceCents: null,
+    durationMinutes: 150,
+    imageUrl: '/services/new-pictures/asphalt-surface-cleaning.jpg',
+    category: 'outdoor',
+    serviceType: 'powerwash',
+  },
+  {
+    id: 'garage-floor',
+    title: 'Garage Floor Degrease & Power Wash',
+    description: 'Cuts through tire marks and oil stains for a renewed workspace floor.',
+    price: 'Starting at $120.00',
+    priceCents: 12000,
+    durationMinutes: 120,
+    imageUrl: '/services/new-pictures/concrete-surface-cleaning.jpg',
+    category: 'outdoor',
+    serviceType: 'powerwash',
+  },
+  {
+    id: 'powerwash-fence',
+    title: 'Fence Washing',
+    description: 'Wood, vinyl, chain link, or metal fences expertly cleaned to restore curb appeal.',
+    price: 'Estimate Required',
+    priceCents: null,
+    durationMinutes: 120,
+    imageUrl: '/services/new-pictures/paver-surface-cleaning.png',
+    category: 'outdoor',
+    serviceType: 'powerwash',
+  },
+  {
+    id: 'deck-patio',
+    title: 'Deck & Patio Cleaning',
+    description: 'Low-pressure cleaning for wood, composite, or stone patios. Estimate offered for large layouts.',
+    price: 'Starting at $100.00',
+    priceCents: 10000,
+    durationMinutes: 150,
+    imageUrl: '/services/new-pictures/stone-surface-cleaning.jpg',
+    category: 'outdoor',
+    serviceType: 'powerwash',
+  },
+  {
+    id: 'outdoor-furniture',
+    title: 'Outdoor Furniture Cleaning',
+    description: 'Refreshes patio seating, umbrellas, and cushions with mold- and pollen-removing rinse.',
+    price: 'Starting at $40.00',
+    priceCents: 4000,
+    durationMinutes: 60,
+    imageUrl: '/services/new-pictures/stone-surface-cleaning.jpg',
+    category: 'outdoor',
+    serviceType: 'powerwash',
+  },
+  {
+    id: 'playset-cleaning',
+    title: 'Playset & Swing Set Cleaning',
+    description: 'Removes algae, pollen, and buildup so kids can enjoy outdoor play equipment safely.',
+    price: 'Starting at $75.00',
+    priceCents: 7500,
+    durationMinutes: 90,
+    imageUrl: '/services/new-pictures/stone-surface-cleaning.jpg',
+    category: 'outdoor',
+    serviceType: 'powerwash',
+  },
+  {
+    id: 'outdoor-decor',
+    title: 'Outdoor Décor Detailing',
+    description: 'Birdbaths, fountains, planters, statues, ceramic gnomes, and more. Gentle cleaning preserves finishes.',
+    price: 'Starting at $50.00',
+    priceCents: 5000,
+    durationMinutes: 45,
+    imageUrl: '/services/new-pictures/stone-surface-cleaning.jpg',
+    category: 'outdoor',
+    serviceType: 'powerwash',
+  },
+
+  // Automotive, Boat & RV Detailing
+  {
+    id: 'car-interior',
+    title: 'Car Interior Detail',
+    description: 'Seats, carpets, door panels, and console steamed and dressed for a showroom feel.',
+    price: '$100.00',
+    priceCents: 10000,
+    durationMinutes: 120,
+    imageUrl: '/services/new-pictures/car-interior-detail.jpg',
+    category: 'automotive',
+    serviceType: 'detailing',
+  },
+  {
+    id: 'car-exterior',
+    title: 'Car Exterior Detail',
+    description: 'Hand wash, clay, and protection to bring back gloss and guard against the elements.',
+    price: '$80.00',
+    priceCents: 8000,
+    durationMinutes: 90,
+    imageUrl: '/services/new-pictures/car-exterior-detail.jpg',
+    category: 'automotive',
+    serviceType: 'detailing',
+  },
+  {
+    id: 'car-full',
+    title: 'Car Full Detail',
+    description: 'Interior + exterior combo for complete rejuvenation of your vehicle.',
+    price: '$160.00',
+    priceCents: 16000,
+    durationMinutes: 210,
+    imageUrl: '/services/new-pictures/car-full-detail.jpg',
+    category: 'automotive',
+    serviceType: 'detailing',
+  },
+  {
+    id: 'boat-small',
+    title: 'Small Boat Detail (<20 ft)',
+    description: 'Interior $100 | Exterior $90 | Full detail $160. Select quantities to match your package.',
+    price: 'Starting at $90.00',
+    priceCents: 9000,
+    durationMinutes: 150,
+    imageUrl: '/services/new-pictures/small-boat-detail.jpg',
+    category: 'automotive',
+    serviceType: 'detailing',
+  },
+  {
+    id: 'boat-medium',
+    title: 'Medium Boat Detail (20–30 ft)',
+    description: 'Interior $120 | Exterior $110 | Full detail $190. Combine services as needed.',
+    price: 'Starting at $110.00',
+    priceCents: 11000,
+    durationMinutes: 180,
+    imageUrl: '/services/new-pictures/small-boat-detail.jpg',
+    category: 'automotive',
+    serviceType: 'detailing',
+  },
+  {
+    id: 'boat-large',
+    title: 'Large Boat Detail (30–40 ft)',
+    description: 'Interior $140 | Exterior $130 | Full detail $220. Boats over 40 ft require an estimate.',
+    price: 'Starting at $130.00',
+    priceCents: 13000,
+    durationMinutes: 210,
+    imageUrl: '/services/new-pictures/small-boat-detail.jpg',
+    category: 'automotive',
+    serviceType: 'detailing',
+  },
+  {
+    id: 'rv-small',
+    title: 'Small RV Detail (<25 ft)',
+    description: 'Interior $150 | Exterior $130 | Full detail $220. Add items to build your custom package.',
+    price: 'Starting at $130.00',
+    priceCents: 13000,
+    durationMinutes: 210,
+    imageUrl: '/services/new-pictures/small-rv-detail.jpg',
+    category: 'automotive',
+    serviceType: 'detailing',
+  },
+  {
+    id: 'rv-large',
+    title: 'Large RV Detail (25 ft+)',
+    description: 'Interior $180 | Exterior $160 | Full detail $260. Perfect for seasonal refresh.',
+    price: 'Starting at $160.00',
+    priceCents: 16000,
+    durationMinutes: 240,
+    imageUrl: '/services/new-pictures/small-rv-detail.jpg',
+    category: 'automotive',
+    serviceType: 'detailing',
+  },
+
+  // Add-ons & Products
+  {
+    id: 'deodorizer-powder',
+    title: 'Carpet & Upholstery Deodorizing Powder',
+    description: 'Long-lasting, natural powder to sprinkle between professional cleanings for a fresh scent.',
+    price: '$10.00',
+    priceCents: 1000,
+    durationMinutes: 0,
+    imageUrl: '/steam-power-hero2.jpg',
+    category: 'addons',
+    serviceType: 'products',
   },
 ];
diff --git a/package-lock.json b/package-lock.json
index b53a6eb..93b8f34 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -11,6 +11,8 @@
         "cors": "^2.8.5",
         "dotenv": "^16.4.7",
         "express": "^4.21.2",
+        "googleapis": "^133.0.0",
+        "nodemailer": "^6.9.15",
         "react": "^19.2.0",
         "react-dom": "^19.2.0"
       },
@@ -1326,12 +1328,41 @@
         "node": ">= 0.6"
       }
     },
+    "node_modules/agent-base": {
+      "version": "7.1.4",
+      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-7.1.4.tgz",
+      "integrity": "sha512-MnA+YT8fwfJPgBx3m60MNqakm30XOkyIoH1y6huTQvC0PwZG7ki8NacLBcrPbNoo8vEZy7Jpuk7+jMO+CUovTQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 14"
+      }
+    },
     "node_modules/array-flatten": {
       "version": "1.1.1",
       "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
       "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg==",
       "license": "MIT"
     },
+    "node_modules/base64-js": {
+      "version": "1.5.1",
+      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
+      "integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ],
+      "license": "MIT"
+    },
     "node_modules/baseline-browser-mapping": {
       "version": "2.8.20",
       "resolved": "https://registry.npmjs.org/baseline-browser-mapping/-/baseline-browser-mapping-2.8.20.tgz",
@@ -1342,6 +1373,15 @@
         "baseline-browser-mapping": "dist/cli.js"
       }
     },
+    "node_modules/bignumber.js": {
+      "version": "9.3.1",
+      "resolved": "https://registry.npmjs.org/bignumber.js/-/bignumber.js-9.3.1.tgz",
+      "integrity": "sha512-Ko0uX15oIUS7wJ3Rb30Fs6SkVbLmPBAKdlm7q9+ak9bbIeFf0MwuBsQV6z7+X768/cHsfg+WlysDWJcmthjsjQ==",
+      "license": "MIT",
+      "engines": {
+        "node": "*"
+      }
+    },
     "node_modules/body-parser": {
       "version": "1.20.3",
       "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.3.tgz",
@@ -1415,6 +1455,12 @@
         "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
       }
     },
+    "node_modules/buffer-equal-constant-time": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
+      "integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA==",
+      "license": "BSD-3-Clause"
+    },
     "node_modules/bytes": {
       "version": "3.1.2",
       "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
@@ -1534,7 +1580,6 @@
       "version": "4.4.3",
       "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.3.tgz",
       "integrity": "sha512-RGwwWnwQvkVfavKVt22FGLw+xYSdzARwm0ru6DhTVA3umU5hZc28V3kO4stgYryrTlLpuvgI9GiijltAjNbcqA==",
-      "dev": true,
       "license": "MIT",
       "dependencies": {
         "ms": "^2.1.3"
@@ -1593,6 +1638,15 @@
         "node": ">= 0.4"
       }
     },
+    "node_modules/ecdsa-sig-formatter": {
+      "version": "1.0.11",
+      "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
+      "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "safe-buffer": "^5.0.1"
+      }
+    },
     "node_modules/ee-first": {
       "version": "1.1.1",
       "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
@@ -1773,6 +1827,12 @@
       "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
       "license": "MIT"
     },
+    "node_modules/extend": {
+      "version": "3.0.2",
+      "resolved": "https://registry.npmjs.org/extend/-/extend-3.0.2.tgz",
+      "integrity": "sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g==",
+      "license": "MIT"
+    },
     "node_modules/fdir": {
       "version": "6.5.0",
       "resolved": "https://registry.npmjs.org/fdir/-/fdir-6.5.0.tgz",
@@ -1866,6 +1926,36 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
+    "node_modules/gaxios": {
+      "version": "6.7.1",
+      "resolved": "https://registry.npmjs.org/gaxios/-/gaxios-6.7.1.tgz",
+      "integrity": "sha512-LDODD4TMYx7XXdpwxAVRAIAuB0bzv0s+ywFonY46k126qzQHT9ygyoa9tncmOiQmmDrik65UYsEkv3lbfqQ3yQ==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "extend": "^3.0.2",
+        "https-proxy-agent": "^7.0.1",
+        "is-stream": "^2.0.0",
+        "node-fetch": "^2.6.9",
+        "uuid": "^9.0.1"
+      },
+      "engines": {
+        "node": ">=14"
+      }
+    },
+    "node_modules/gcp-metadata": {
+      "version": "6.1.1",
+      "resolved": "https://registry.npmjs.org/gcp-metadata/-/gcp-metadata-6.1.1.tgz",
+      "integrity": "sha512-a4tiq7E0/5fTjxPAaH4jpjkSv/uCaU2p5KC6HVGrvl0cDjA8iBZv4vv1gyzlmK0ZUKqwpOyQMKzZQe3lTit77A==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "gaxios": "^6.1.1",
+        "google-logging-utils": "^0.0.2",
+        "json-bigint": "^1.0.0"
+      },
+      "engines": {
+        "node": ">=14"
+      }
+    },
     "node_modules/gensync": {
       "version": "1.0.0-beta.2",
       "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
@@ -1926,6 +2016,62 @@
         "url": "https://github.com/privatenumber/get-tsconfig?sponsor=1"
       }
     },
+    "node_modules/google-auth-library": {
+      "version": "9.15.1",
+      "resolved": "https://registry.npmjs.org/google-auth-library/-/google-auth-library-9.15.1.tgz",
+      "integrity": "sha512-Jb6Z0+nvECVz+2lzSMt9u98UsoakXxA2HGHMCxh+so3n90XgYWkq5dur19JAJV7ONiJY22yBTyJB1TSkvPq9Ng==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "base64-js": "^1.3.0",
+        "ecdsa-sig-formatter": "^1.0.11",
+        "gaxios": "^6.1.1",
+        "gcp-metadata": "^6.1.0",
+        "gtoken": "^7.0.0",
+        "jws": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=14"
+      }
+    },
+    "node_modules/google-logging-utils": {
+      "version": "0.0.2",
+      "resolved": "https://registry.npmjs.org/google-logging-utils/-/google-logging-utils-0.0.2.tgz",
+      "integrity": "sha512-NEgUnEcBiP5HrPzufUkBzJOD/Sxsco3rLNo1F1TNf7ieU8ryUzBhqba8r756CjLX7rn3fHl6iLEwPYuqpoKgQQ==",
+      "license": "Apache-2.0",
+      "engines": {
+        "node": ">=14"
+      }
+    },
+    "node_modules/googleapis": {
+      "version": "133.0.0",
+      "resolved": "https://registry.npmjs.org/googleapis/-/googleapis-133.0.0.tgz",
+      "integrity": "sha512-6xyc49j+x7N4smawJs/q1i7mbSkt6SYUWWd9RbsmmDW7gRv+mhwZ4xT+XkPihZcNyo/diF//543WZq4szdS74w==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "google-auth-library": "^9.0.0",
+        "googleapis-common": "^7.0.0"
+      },
+      "engines": {
+        "node": ">=14.0.0"
+      }
+    },
+    "node_modules/googleapis-common": {
+      "version": "7.2.0",
+      "resolved": "https://registry.npmjs.org/googleapis-common/-/googleapis-common-7.2.0.tgz",
+      "integrity": "sha512-/fhDZEJZvOV3X5jmD+fKxMqma5q2Q9nZNSF3kn1F18tpxmA86BcTxAGBQdM0N89Z3bEaIs+HVznSmFJEAmMTjA==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "extend": "^3.0.2",
+        "gaxios": "^6.0.3",
+        "google-auth-library": "^9.7.0",
+        "qs": "^6.7.0",
+        "url-template": "^2.0.8",
+        "uuid": "^9.0.0"
+      },
+      "engines": {
+        "node": ">=14.0.0"
+      }
+    },
     "node_modules/gopd": {
       "version": "1.2.0",
       "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
@@ -1938,6 +2084,19 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
+    "node_modules/gtoken": {
+      "version": "7.1.0",
+      "resolved": "https://registry.npmjs.org/gtoken/-/gtoken-7.1.0.tgz",
+      "integrity": "sha512-pCcEwRi+TKpMlxAQObHDQ56KawURgyAf6jtIY046fJ5tIv3zDe/LEIubckAO8fj6JnAxLdmWkUfNyulQ2iKdEw==",
+      "license": "MIT",
+      "dependencies": {
+        "gaxios": "^6.0.0",
+        "jws": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=14.0.0"
+      }
+    },
     "node_modules/has-symbols": {
       "version": "1.1.0",
       "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
@@ -1978,6 +2137,19 @@
         "node": ">= 0.8"
       }
     },
+    "node_modules/https-proxy-agent": {
+      "version": "7.0.6",
+      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-7.0.6.tgz",
+      "integrity": "sha512-vK9P5/iUfdl95AI+JVyUuIcVtd4ofvtrOr3HNtM2yxC9bnMbEdp3x01OhQNnjb8IJYi38VlTE3mBXwcfvywuSw==",
+      "license": "MIT",
+      "dependencies": {
+        "agent-base": "^7.1.2",
+        "debug": "4"
+      },
+      "engines": {
+        "node": ">= 14"
+      }
+    },
     "node_modules/iconv-lite": {
       "version": "0.4.24",
       "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
@@ -2005,6 +2177,18 @@
         "node": ">= 0.10"
       }
     },
+    "node_modules/is-stream": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
+      "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
     "node_modules/js-tokens": {
       "version": "4.0.0",
       "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
@@ -2025,6 +2209,15 @@
         "node": ">=6"
       }
     },
+    "node_modules/json-bigint": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/json-bigint/-/json-bigint-1.0.0.tgz",
+      "integrity": "sha512-SiPv/8VpZuWbvLSMtTDU8hEfrZWg/mH/nV/b4o0CYbSxu1UIQPLdwKOCIyLQX+VIPO5vrLX3i8qtqFyhdPSUSQ==",
+      "license": "MIT",
+      "dependencies": {
+        "bignumber.js": "^9.0.0"
+      }
+    },
     "node_modules/json5": {
       "version": "2.2.3",
       "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
@@ -2038,6 +2231,27 @@
         "node": ">=6"
       }
     },
+    "node_modules/jwa": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/jwa/-/jwa-2.0.1.tgz",
+      "integrity": "sha512-hRF04fqJIP8Abbkq5NKGN0Bbr3JxlQ+qhZufXVr0DvujKy93ZCbXZMHDL4EOtodSbCWxOqR8MS1tXA5hwqCXDg==",
+      "license": "MIT",
+      "dependencies": {
+        "buffer-equal-constant-time": "^1.0.1",
+        "ecdsa-sig-formatter": "1.0.11",
+        "safe-buffer": "^5.0.1"
+      }
+    },
+    "node_modules/jws": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/jws/-/jws-4.0.0.tgz",
+      "integrity": "sha512-KDncfTmOZoOMTFG4mBlG0qUIOlc03fmzH+ru6RgYVZhPkyiy/92Owlt/8UEN+a4TXR1FQetfIpJE8ApdvdVxTg==",
+      "license": "MIT",
+      "dependencies": {
+        "jwa": "^2.0.0",
+        "safe-buffer": "^5.0.1"
+      }
+    },
     "node_modules/lru-cache": {
       "version": "5.1.1",
       "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
@@ -2151,6 +2365,26 @@
         "node": ">= 0.6"
       }
     },
+    "node_modules/node-fetch": {
+      "version": "2.7.0",
+      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.7.0.tgz",
+      "integrity": "sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==",
+      "license": "MIT",
+      "dependencies": {
+        "whatwg-url": "^5.0.0"
+      },
+      "engines": {
+        "node": "4.x || >=6.0.0"
+      },
+      "peerDependencies": {
+        "encoding": "^0.1.0"
+      },
+      "peerDependenciesMeta": {
+        "encoding": {
+          "optional": true
+        }
+      }
+    },
     "node_modules/node-releases": {
       "version": "2.0.26",
       "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.26.tgz",
@@ -2158,6 +2392,15 @@
       "dev": true,
       "license": "MIT"
     },
+    "node_modules/nodemailer": {
+      "version": "6.10.1",
+      "resolved": "https://registry.npmjs.org/nodemailer/-/nodemailer-6.10.1.tgz",
+      "integrity": "sha512-Z+iLaBGVaSjbIzQ4pX6XV41HrooLsQ10ZWPUehGmuantvzWoDVBnmsdUcOIDM1t+yPor5pDhVlDESgOMEGxhHA==",
+      "license": "MIT-0",
+      "engines": {
+        "node": ">=6.0.0"
+      }
+    },
     "node_modules/object-assign": {
       "version": "4.1.1",
       "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
@@ -2618,6 +2861,12 @@
         "node": ">=0.6"
       }
     },
+    "node_modules/tr46": {
+      "version": "0.0.3",
+      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
+      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==",
+      "license": "MIT"
+    },
     "node_modules/tsx": {
       "version": "4.20.6",
       "resolved": "https://registry.npmjs.org/tsx/-/tsx-4.20.6.tgz",
@@ -2712,6 +2961,12 @@
         "browserslist": ">= 4.21.0"
       }
     },
+    "node_modules/url-template": {
+      "version": "2.0.8",
+      "resolved": "https://registry.npmjs.org/url-template/-/url-template-2.0.8.tgz",
+      "integrity": "sha512-XdVKMF4SJ0nP/O7XIPB0JwAEuT9lDIYnNsK8yGVe43y0AWoKeJNdv3ZNWh7ksJ6KqQFjOO6ox/VEitLnaVNufw==",
+      "license": "BSD"
+    },
     "node_modules/utils-merge": {
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
@@ -2721,6 +2976,19 @@
         "node": ">= 0.4.0"
       }
     },
+    "node_modules/uuid": {
+      "version": "9.0.1",
+      "resolved": "https://registry.npmjs.org/uuid/-/uuid-9.0.1.tgz",
+      "integrity": "sha512-b+1eJOlsR9K8HJpow9Ok3fiWOWSIcIzXodvv0rQjVoOVNpWMpxf1wZNpt4y9h10odCNrqnYp1OBzRktckBe3sA==",
+      "funding": [
+        "https://github.com/sponsors/broofa",
+        "https://github.com/sponsors/ctavan"
+      ],
+      "license": "MIT",
+      "bin": {
+        "uuid": "dist/bin/uuid"
+      }
+    },
     "node_modules/vary": {
       "version": "1.1.2",
       "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
@@ -2805,6 +3073,22 @@
         }
       }
     },
+    "node_modules/webidl-conversions": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
+      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==",
+      "license": "BSD-2-Clause"
+    },
+    "node_modules/whatwg-url": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
+      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
+      "license": "MIT",
+      "dependencies": {
+        "tr46": "~0.0.3",
+        "webidl-conversions": "^3.0.0"
+      }
+    },
     "node_modules/yallist": {
       "version": "3.1.1",
       "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
diff --git a/package.json b/package.json
index d8e64ba..b7fac26 100644
--- a/package.json
+++ b/package.json
@@ -13,16 +13,18 @@
     "cors": "^2.8.5",
     "dotenv": "^16.4.7",
     "express": "^4.21.2",
+    "googleapis": "^133.0.0",
+    "nodemailer": "^6.9.15",
     "react": "^19.2.0",
     "react-dom": "^19.2.0"
   },
   "devDependencies": {
-    "@types/node": "^22.14.0",
-    "@types/express": "^5.0.0",
     "@types/cors": "^2.8.17",
+    "@types/express": "^5.0.0",
+    "@types/node": "^22.14.0",
     "@vitejs/plugin-react": "^5.0.0",
+    "tsx": "^4.19.2",
     "typescript": "~5.8.2",
-    "vite": "^6.2.0",
-    "tsx": "^4.19.2"
+    "vite": "^6.2.0"
   }
 }
diff --git a/server/index.ts b/server/index.ts
index 7d785a8..0b31ed8 100644
--- a/server/index.ts
+++ b/server/index.ts
@@ -3,24 +3,31 @@ import cors from 'cors';
 import dotenv from 'dotenv';
 import path from 'path';
 import { fileURLToPath } from 'url';
-import crypto from 'crypto';
-import { getServiceById } from './services';
 import { SERVICES } from '../data/services';
+import { calculateCartTotals, resolveCartItems } from './services';
+import {
+  hasGoogleCalendarConfig,
+  checkCalendarConflicts,
+  createCalendarBooking,
+} from './googleCalendar';
+import { hasEmailConfig, sendBookingConfirmation } from './email';
 
 const __filename = fileURLToPath(import.meta.url);
 const __dirname = path.dirname(__filename);
+
 dotenv.config({ path: path.resolve(__dirname, '../.env') });
 
 const app = express();
 const PORT = Number(process.env.API_PORT || 4000);
-const SQUARE_ACCESS_TOKEN = process.env.SQUARE_ACCESS_TOKEN;
-const SQUARE_LOCATION_ID = process.env.SQUARE_LOCATION_ID;
 
-if (!SQUARE_ACCESS_TOKEN) {
-  console.warn('[square] Missing SQUARE_ACCESS_TOKEN in .env — POST /api/square/checkout will fail until it is provided.');
+if (!hasGoogleCalendarConfig()) {
+  console.warn(
+    '[calendar] Google Calendar is not fully configured — POST /api/bookings will fail until credentials are provided.',
+  );
 }
-if (!SQUARE_LOCATION_ID) {
-  console.warn('[square] Missing SQUARE_LOCATION_ID in .env — POST /api/square/checkout will fail until it is provided.');
+
+if (!hasEmailConfig()) {
+  console.warn('[email] SMTP configuration is missing — booking confirmations will not be sent.');
 }
 
 app.use(cors());
@@ -37,71 +44,155 @@ app.get('/api/services', (_req, res) => {
   res.json({ services: getServiceListForApi() });
 });
 
-app.post('/api/square/checkout', async (req, res) => {
-  if (!SQUARE_ACCESS_TOKEN || !SQUARE_LOCATION_ID) {
-    return res.status(500).json({ error: 'Square credentials are missing on the server.' });
+app.post('/api/bookings', async (req, res) => {
+  if (!hasGoogleCalendarConfig()) {
+    return res.status(500).json({ error: 'Google Calendar credentials are missing on the server.' });
   }
 
-  const { token, serviceId } = req.body ?? {};
-  if (typeof token !== 'string' || typeof serviceId !== 'string') {
-    return res.status(400).json({ error: 'token and serviceId are required.' });
+  const body = req.body ?? {};
+
+  const rawItems: { serviceId: string; quantity: number }[] = Array.isArray(body.items)
+    ? body.items
+        .filter((item: any) => typeof item?.serviceId === 'string')
+        .map((item: any) => ({
+          serviceId: item.serviceId,
+          quantity: Number.isFinite(item.quantity) ? item.quantity : 1,
+        }))
+    : typeof body.serviceId === 'string'
+    ? [
+        {
+          serviceId: body.serviceId,
+          quantity: Number.isFinite(body.quantity) ? body.quantity : 1,
+        },
+      ]
+    : [];
+
+  if (!rawItems.length) {
+    return res.status(400).json({ error: 'At least one service selection is required.' });
   }
 
-  const service = getServiceById(serviceId);
-  if (!service) {
-    return res.status(404).json({ error: 'Service not found.' });
+  let cartItems;
+  try {
+    cartItems = resolveCartItems(rawItems);
+  } catch (error) {
+    return res.status(404).json({
+      error: error instanceof Error ? error.message : 'One or more services could not be found.',
+    });
   }
-  if (!service.priceCents || service.priceCents <= 0) {
-    return res.status(400).json({ error: 'This service requires a custom quote. Use the hosted Square link instead.' });
+
+  const customerName: string | undefined = body.customer?.name ?? body.name;
+  const customerEmail: string | undefined = body.customer?.email ?? body.email;
+  const customerPhone: string | undefined = body.customer?.phone ?? body.phone;
+  const notes: string | undefined = body.notes ?? body.customer?.notes ?? body.details;
+
+  if (typeof customerName !== 'string' || !customerName.trim()) {
+    return res.status(400).json({ error: 'A customer name is required.' });
   }
 
-  const amountMoney = {
-    amount: service.priceCents,
-    currency: 'USD' as const,
-  };
+  if (typeof customerEmail !== 'string' || !customerEmail.trim()) {
+    return res.status(400).json({ error: 'A customer email is required.' });
+  }
 
-  try {
-    const orderResponse = await fetch('https://connect.squareupsandbox.com/v2/orders', {
-      method: 'POST',
-      headers: squareHeaders(SQUARE_ACCESS_TOKEN),
-      body: JSON.stringify({
-        idempotency_key: crypto.randomUUID(),
-        order: {
-          location_id: SQUARE_LOCATION_ID,
-          line_items: [buildLineItem(service, amountMoney)],
-        },
-      }),
-    });
+  const requestedStart: string | undefined = body.requestedStart ?? body.startTime;
+  if (typeof requestedStart !== 'string') {
+    return res.status(400).json({ error: 'requestedStart must be an ISO-8601 string.' });
+  }
+
+  const startDate = new Date(requestedStart);
+  if (Number.isNaN(startDate.getTime())) {
+    return res.status(400).json({ error: 'Invalid requestedStart format.' });
+  }
+
+  const { totalPriceCents, totalDurationMinutes } = calculateCartTotals(cartItems);
+  const durationMinutes = totalDurationMinutes > 0 ? totalDurationMinutes : 60;
+  const endDate = new Date(startDate.getTime() + durationMinutes * 60 * 1000);
+
+  if (endDate <= startDate) {
+    return res.status(400).json({ error: 'Unable to calculate booking duration.' });
+  }
 
-    const orderPayload = await orderResponse.json();
-    if (!orderResponse.ok) {
-      return res.status(orderResponse.status).json(formatSquareError(orderPayload));
+  const timeZone = typeof body.timeZone === 'string' && body.timeZone ? body.timeZone : 'UTC';
+
+  try {
+    const hasConflict = await checkCalendarConflicts(startDate.toISOString(), endDate.toISOString());
+    if (hasConflict) {
+      return res.status(409).json({ error: 'That time is no longer available. Please pick a different slot.' });
     }
 
-    const orderId = orderPayload?.order?.id;
-    const paymentResponse = await fetch('https://connect.squareupsandbox.com/v2/payments', {
-      method: 'POST',
-      headers: squareHeaders(SQUARE_ACCESS_TOKEN),
-      body: JSON.stringify({
-        idempotency_key: crypto.randomUUID(),
-        source_id: token,
-        location_id: SQUARE_LOCATION_ID,
-        amount_money: amountMoney,
-        order_id: orderId,
-        note: `Steam Powered — ${service.title}`,
-        autocomplete: true,
-      }),
+    const serviceSummaryLines = cartItems.map(
+      (item) => `${item.quantity} × ${item.service.title} (${item.service.price})`,
+    );
+
+    const descriptionLines = [
+      `Customer: ${customerName}`,
+      `Email: ${customerEmail}`,
+      customerPhone ? `Phone: ${customerPhone}` : null,
+      '',
+      'Services:',
+      ...serviceSummaryLines,
+      '',
+      totalPriceCents ? `Estimated total: ${formatCurrency(totalPriceCents)}` : null,
+      notes ? `Notes: ${notes}` : null,
+    ].filter(Boolean) as string[];
+
+    const event = await createCalendarBooking({
+      summary: `Steam Powered Cleaning — ${customerName}`,
+      description: descriptionLines.join('\n'),
+      startTime: startDate.toISOString(),
+      endTime: endDate.toISOString(),
+      timeZone,
+      attendeeEmail: customerEmail,
+      attendeeName: customerName,
+      extendedProperties: {
+        cart: cartItems.map((item) => `${item.service.id}:${item.quantity}`).join(','),
+        phone: customerPhone,
+        notes,
+        totalPriceCents,
+      },
     });
 
-    const paymentPayload = await paymentResponse.json();
-    if (!paymentResponse.ok) {
-      return res.status(paymentResponse.status).json(formatSquareError(paymentPayload));
+    let emailSent = false;
+    try {
+      emailSent = await sendBookingConfirmation({
+        to: customerEmail,
+        customerName,
+        scheduledStartIso: startDate.toISOString(),
+        timeZone,
+        totalPriceCents,
+        totalDurationMinutes: durationMinutes,
+        items: cartItems.map((item) => ({
+          title: item.service.title,
+          quantity: item.quantity,
+          price: item.service.price,
+          serviceType: item.service.serviceType,
+        })),
+        notes,
+        phone: customerPhone,
+      });
+    } catch (emailError) {
+      console.error('[email] Failed to send booking confirmation', emailError);
     }
 
-    return res.json({ payment: paymentPayload.payment, order: orderPayload.order });
+    return res.json({
+      eventId: event.id,
+      calendarUrl: event.htmlLink,
+      durationMinutes,
+      totalPriceCents,
+      emailSent,
+      startTime: startDate.toISOString(),
+      timeZone,
+      items: cartItems.map((item) => ({
+        serviceId: item.service.id,
+        title: item.service.title,
+        quantity: item.quantity,
+        price: item.service.price,
+        priceCents: item.service.priceCents ?? 0,
+        serviceType: item.service.serviceType,
+      })),
+    });
   } catch (error) {
-    console.error('[square] Error creating payment', error);
-    return res.status(500).json({ error: 'Server error while talking to Square' });
+    console.error('[calendar] Error creating booking', error);
+    return res.status(500).json({ error: 'Unable to create calendar event on the server.' });
   }
 });
 
@@ -117,39 +208,14 @@ app.listen(PORT, () => {
   console.log(`Steam Powered API listening on http://localhost:${PORT}`);
 });
 
-function squareHeaders(accessToken: string) {
-  return {
-    'Content-Type': 'application/json',
-    Authorization: `Bearer ${accessToken}`,
-    'Square-Version': '2024-09-18',
-  };
-}
-
-function buildLineItem(service: ReturnType<typeof getServiceById>, amountMoney: { amount: number; currency: 'USD' }) {
-  const lineItem: Record<string, unknown> = {
-    name: service?.title,
-    quantity: '1',
-    base_price_money: amountMoney,
-  };
-
-  if (service?.squareItemVariationId) {
-    lineItem.catalog_object_id = service.squareItemVariationId;
-    lineItem.item_type = 'ITEM';
-  }
-
-  return lineItem;
-}
-
 function getServiceListForApi() {
   return SERVICES.map(({ id, title, price, priceCents }) => ({ id, title, price, priceCents }));
 }
 
-function formatSquareError(payload: any) {
-  if (payload?.errors?.length) {
-    return {
-      error: payload.errors.map((err: any) => err.detail || err.message || err.code).join('; '),
-      errors: payload.errors,
-    };
-  }
-  return { error: 'Unexpected Square API error', details: payload };
+function formatCurrency(cents: number) {
+  return new Intl.NumberFormat('en-US', {
+    style: 'currency',
+    currency: 'USD',
+    minimumFractionDigits: 2,
+  }).format(cents / 100);
 }
diff --git a/server/services.ts b/server/services.ts
index 7d33786..26bb069 100644
--- a/server/services.ts
+++ b/server/services.ts
@@ -1,3 +1,48 @@
 import { SERVICES } from '../data/services';
+import type { Service } from '../types';
+
+export interface CartItemInput {
+  serviceId: string;
+  quantity: number;
+}
+
+export interface CartLineItem {
+  service: Service;
+  quantity: number;
+}
 
 export const getServiceById = (id: string) => SERVICES.find((service) => service.id === id);
+
+export const resolveCartItems = (items: CartItemInput[]): CartLineItem[] => {
+  return items.map((item) => {
+    const service = getServiceById(item.serviceId);
+    if (!service) {
+      throw new Error(`Service not found: ${item.serviceId}`);
+    }
+
+    const numericQuantity = Number(item.quantity);
+    const quantity = Number.isFinite(numericQuantity)
+      ? Math.max(1, Math.floor(numericQuantity))
+      : 1;
+
+    return {
+      service,
+      quantity,
+    };
+  });
+};
+
+export const calculateCartTotals = (cartItems: CartLineItem[]) => {
+  return cartItems.reduce(
+    (acc, item) => {
+      const priceCents = item.service.priceCents ?? 0;
+      acc.totalPriceCents += priceCents * item.quantity;
+      acc.totalDurationMinutes += (item.service.durationMinutes ?? 0) * item.quantity;
+      return acc;
+    },
+    {
+      totalPriceCents: 0,
+      totalDurationMinutes: 0,
+    },
+  );
+};
diff --git a/types.ts b/types.ts
index e9d0106..b2a5b52 100644
--- a/types.ts
+++ b/types.ts
@@ -1,5 +1,17 @@
 import type { ReactElement } from 'react';
 
+export type ServiceCategory = 'indoor' | 'outdoor' | 'automotive' | 'addons';
+
+export type ServiceFocus =
+  | 'carpet'
+  | 'tile'
+  | 'upholstery'
+  | 'windows'
+  | 'area_rug'
+  | 'powerwash'
+  | 'detailing'
+  | 'products';
+
 export interface Service {
   id: string;
   title: string;
@@ -7,9 +19,12 @@ export interface Service {
   price: string;
   priceCents?: number | null;
   imageUrl: string;
+  category: ServiceCategory;
+  serviceType: ServiceFocus;
+  sizeLabel?: string;
+  durationMinutes: number;
   squareLink?: string;
   squareItemVariationId?: string;
-  category: 'indoor' | 'outdoor' | 'estimate' | 'automotive';
 }
 
 export interface Testimonial {
